{
	"info": {
		"_postman_id": "567eb7be-fcd6-47c6-a15e-eda87abb0cf7",
		"name": "Worldline Direct API",
		"description": "# Introduction \nThe API has been designed as a REST API. It uses the HTTP protocol as its foundation. Each resource is accessible under a clearly named URL and the HTTP response codes are used to relay status. HTTP Verbs like GET and POST are used to interact with the resources. To support accessibility by clients directly, as opposed to your server, our servers support cross-origin resource sharing. We use JSON for all of our payloads, including error messages. We use HMAC-SHA256 for the [authentication](/documentation/api/authentication).\n\nAll these characteristics mean that you will be able to use standard off-the-shelf software to interact with our payment platform. To make the integration even easier, payment platform also has SDKs that wrap both the complete Server API as well as the complete Client API.\n\nIn order to use this Postman Collection you will have to set some Environment variables. We recommend using the [Worldline Direct API - Test Environment]() template.\n\nOnce the environment template is set then the Environment variables can be set via the Environment quick look setting (fig. A) or via the Environment management panel (fig. B).\n\n<img src=\"https://content.pstmn.io/87a64ce8-c305-473b-a6d7-d1f2ba0adbe2/RW52aXJvbm1lbnRfZmlnX0EuZ2lm\" alt=\"Fig.%20A\">\n\n<img src=\"https://content.pstmn.io/def6652e-7328-4832-b77f-e979578bdaa2/RW52aXJvbm1lbnRfZmlnX0IuZ2lm\" alt=\"Fig.%20B\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27570027",
		"_collection_link": "https://ionesolutions.postman.co/workspace/1573e628-8f7e-4ce0-a98b-0bd861eb89ff/collection/27570027-567eb7be-fcd6-47c6-a15e-eda87abb0cf7?action=share&source=collection_link&creator=27570027"
	},
	"item": [
		{
			"name": "Server API",
			"item": [
				{
					"name": "HostedCheckout",
					"item": [
						{
							"name": "Create hosted checkout - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": {\n    \"amountOfMoney\": {\n      \"amount\": 1000,\n      \"currencyCode\": \"EUR\"\n    },\n    \"customer\": {\n      \"billingAddress\": {\n        \"countryCode\": \"BE\"\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts"
									]
								},
								"description": "You can start a hostedCheckout flow by posting the relevant details to the endpoint. We will then return you all the details you need to redirect the consumer to us, retrieve the status and recognize the consumer when he/she returns to your website.  \nThe hosted checkout allows the use of three distinct components:\n\n- Presenting a (filtered) list of payment products that the consumer can choose from;\n    \n- Handling of the actual payment, potentially involving data capture, redirection and/or the displaying of payment instructions;\n    \n- Presenting a confirmation/failure page after the payment.\n    \n\nStep 1 and 3 from the above list are optional. When no or partial filtering is provided, the first page the consumer will see is a payment product selection page. However, the hosted checkout will start as if a payment product had been selected if that specific payment product is the only entry in the request's restriction filters.\n\nBy providing payment product ids and groups in the hostedCheckoutSpecificInput's paymentProductFilters object, you can reduce the list of available payment products by either excluding or restricting to certain products. Note that at least one viable payment product must be left after filtering and that exclusion is leading, meaning that restricting and excluding the same product will lead to exclusion.\n\nBy setting the tokensOnly boolean to true, as part of the paymentProductFilters object, the consumer may only complete the payment using one of the accounts on file provided in the tokens property of hostedCheckoutSpecificInput.\n\nBy setting the showResultPage boolean to false, as part of the hostedCheckoutSpecificInput, the system will skip the confirmation/failure page after the consumer has completed the payment. This setting is true by default and the results page will be presented to the user.\n\nIn case the payment product selection page needs to be skipped the hostedCheckout call needs to contain one of the following objects in which all payment products have been categorized. These will also be used if the consumer selects a related payment product.\n\n- Card payments - cardPaymentMethodSpecificInput\n    \n- All credit and debit card products fall into this category if they allow for direct submission of card data without a redirect to a third party to capture the card details.\n    \n- Redirect payments - redirectPaymentMethodSpecificInput\n    \n- Mobile payments - mobilePaymentMethodSpecificInput\n    \n- All payment products that involve a redirect to a 3rd party to complete the payment directly online, like PayPal.\n    \n\nA generic transaction can be submitted using the order and the fraudFields objects."
							},
							"response": []
						},
						{
							"name": "Create hosted checkout - Basic - Cards",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"authorizationMode\": \"FINAL_AUTHORIZATION\",\n    \"tokenize\": true\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 100\n    },\n    \"customer\": {\n      \"merchantCustomerId\": \"mc_637521911919765074\",\n      \"locale\": \"en_GB\",\n      \"personalInformation\": {\n        \"name\": {\n          \"title\": \"M.\",\n          \"firstName\": \"Wile\",\n          \"surname\": \"Coyote\"\n        },\n        \"gender\": \"male\",\n        \"dateOfBirth\": \"19490917\"\n      },\n      \"companyInformation\": {\n        \"name\": \"BEL Labs\"\n      },\n      \"billingAddress\": {\n        \"street\": \"Da Vincilaan\",\n        \"houseNumber\": \"3\",\n        \"additionalInfo\": \"floor 9\",\n        \"zip\": \"1930\",\n        \"city\": \"Brussels\",\n        \"state\": \"Flemish Brabant\",\n        \"countryCode\": \"BE\"\n      },\n      \"shipping\": {\n        \"address\": {\n          \"additionalInfo\": \"floor 9\",\n          \"city\": \"Brussels\",\n          \"countryCode\": \"BE\",\n          \"houseNumber\": \"3\",\n          \"state\": \"Flemish Brabant\",\n          \"street\": \"Da Vincilaan\",\n          \"zip\": \"1930\",\n          \"name\": {\n            \"title\": \"Mme.\",\n            \"firstName\": \"bip\",\n            \"surname\": \"bip\"\n          }\n        },\n        \"addressIndicator\": \"string\",\n        \"emailAddress\": \"string\",\n        \"firstUsageDate\": \"20230101\",\n        \"isFirstUsage\": true,\n        \"method\": {},\n        \"type\": \"string\",\n        \"shippingCost\": 1000,\n        \"shippingCostTax\": 100\n      },\n      \"contactDetails\": {\n        \"emailAddress\": \"wile.e.coyote@acmelabs.com\",\n        \"phoneNumber\": \"+321234567890\",\n        \"faxNumber\": \"+1234567891\",\n        \"emailMessageType\": \"html\"\n      },\n      \"fiscalNumber\": \"BE0133117948\"\n    },\n    \"references\": {\n      \"merchantReference\": \"mr_637521911919765074\",\n      \"merchantParameters\": \"SessionID=126548354&ShopperID=73541312\",\n      \"descriptor\": \"Fast and Furry-ous\"\n    },\n    \"shoppingCart\": {\n      \"items\": [\n        {\n          \"amountOfMoney\": {\n            \"currencyCode\": \"EUR\",\n            \"amount\": 100\n          },\n          \"invoiceData\": {\n            \"description\": \"BEL curve\"\n          },\n          \"orderLineDetails\": {\n            \"productName\": \"ACME12\",\n            \"discountAmount\": 0,\n            \"lineAmountTotal\": 100,\n            \"productCode\": \"ASO45\",\n            \"productPrice\": 100,\n            \"productType\": \"FoodAndDrink\",\n            \"quantity\": 1,\n            \"taxAmount\": 0,\n            \"unit\": \"piece\"\n          }\n        }\n      ]\n    }\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"isRecurring\": false,\n    \"locale\": \"en_GB\"\n  },\n  \"redirectPaymentMethodSpecificInput\": {\n    \"requiresApproval\": false\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts"
									]
								},
								"description": "You can start a hostedCheckout flow by posting the relevant details to the endpoint. We will then return you all the details you need to redirect the consumer to us, retrieve the status and recognize the consumer when he/she returns to your website. \n The hosted checkout allows the use of three distinct components:\n\n* Presenting a (filtered) list of payment products that the consumer can choose from;\n\n* Handling of the actual payment, potentially involving data capture, redirection and/or the displaying of payment instructions;\n\n* Presenting a confirmation/failure page after the payment.\n\n\n Step 1 and 3 from the above list are optional. When no or partial filtering is provided, the first page the consumer will see is a payment product selection page. However, the hosted checkout will start as if a payment product had been selected if that specific payment product is the only entry in the request's restriction filters.\n\nBy providing payment product ids and groups in the hostedCheckoutSpecificInput's paymentProductFilters object, you can reduce the list of available payment products by either excluding or restricting to certain products. Note that at least one viable payment product must be left after filtering and that exclusion is leading, meaning that restricting and excluding the same product will lead to exclusion.\n\nBy setting the tokensOnly boolean to true, as part of the paymentProductFilters object, the consumer may only complete the payment using one of the accounts on file provided in the tokens property of hostedCheckoutSpecificInput.\n\nBy setting the showResultPage boolean to false, as part of the hostedCheckoutSpecificInput, the system will skip the confirmation/failure page after the consumer has completed the payment. This setting is true by default and the results page will be presented to the user.\n\nIn case the payment product selection page needs to be skipped the hostedCheckout call needs to contain one of the following objects in which all payment products have been categorized. These will also be used if the consumer selects a related payment product.\n\n* Card payments - cardPaymentMethodSpecificInput\n\n* All credit and debit card products fall into this category if they allow for direct submission of card data without a redirect to a third party to capture the card details.\n\n* Redirect payments - redirectPaymentMethodSpecificInput\n\n* Mobile payments - mobilePaymentMethodSpecificInput\n\n* All payment products that involve a redirect to a 3rd party to complete the payment directly online, like PayPal.\n\nA generic transaction can be submitted using the order and the fraudFields objects."
							},
							"response": []
						},
						{
							"name": "Create hosted checkout - Basic - Cards Direct Sale",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"authorizationMode\": \"SALE\",\n    \"tokenize\": true\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 100\n    },\n    \"customer\": {\n      \"merchantCustomerId\": \"mc_637521911919765074\",\n      \"locale\": \"en_GB\",\n      \"personalInformation\": {\n        \"name\": {\n          \"title\": \"M.\",\n          \"firstName\": \"Wile\",\n          \"surname\": \"Coyote\"\n        },\n        \"gender\": \"male\",\n        \"dateOfBirth\": \"19490917\"\n      },\n      \"companyInformation\": {\n        \"name\": \"BEL Labs\"\n      },\n      \"billingAddress\": {\n        \"street\": \"Da Vincilaan\",\n        \"houseNumber\": \"3\",\n        \"additionalInfo\": \"floor 9\",\n        \"zip\": \"1930\",\n        \"city\": \"Brussels\",\n        \"state\": \"Flemish Brabant\",\n        \"countryCode\": \"BE\"\n      },\n      \"shippingAddress\": {\n        \"name\": {\n          \"title\": \"Mme.\",\n          \"firstName\": \"bip\",\n          \"surname\": \"bip\"\n        },\n        \"street\": \"Da Vincilaan\",\n        \"houseNumber\": \"3\",\n        \"additionalInfo\": \"floor 9\",\n        \"zip\": \"1930\",\n        \"city\": \"Brussels\",\n        \"state\": \"Flemish Brabant\",\n        \"countryCode\": \"BE\"\n      },\n      \"contactDetails\": {\n        \"emailAddress\": \"wile.e.coyote@acmelabs.com\",\n        \"phoneNumber\": \"+321234567890\",\n        \"faxNumber\": \"+1234567891\",\n        \"emailMessageType\": \"html\"\n      },\n      \"fiscalNumber\": \"BE0133117948\"\n    },\n    \"references\": {\n      \"merchantReference\": \"mr_637521911919765074\",\n      \"merchantParameters\": \"SessionID=126548354&ShopperID=73541312\",\n      \"descriptor\": \"Fast and Furry-ous\"\n    },\n    \"shoppingCart\": {\n      \"items\": [\n        {\n          \"amountOfMoney\": {\n            \"currencyCode\": \"EUR\",\n            \"amount\": 100\n          },\n          \"invoiceData\": {\n            \"description\": \"BEL curve\"\n          },\n          \"orderLineDetails\": {\n            \"productName\": \"ACME12\",\n            \"discountAmount\": 0,\n            \"lineAmountTotal\": 100,\n            \"productCode\": \"ASO45\",\n            \"productPrice\": 100,\n            \"productType\": \"FoodAndDrink\",\n            \"quantity\": 1,\n            \"taxAmount\": 0,\n            \"unit\": \"piece\"\n          }\n        }\n      ]\n    }\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"isRecurring\": false,\n    \"locale\": \"en_GB\"\n  },\n  \"redirectPaymentMethodSpecificInput\": {\n    \"requiresApproval\": false\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts"
									]
								},
								"description": "You can start a hostedCheckout flow by posting the relevant details to the endpoint. We will then return you all the details you need to redirect the consumer to us, retrieve the status and recognize the consumer when he/she returns to your website. \n The hosted checkout allows the use of three distinct components:\n\n* Presenting a (filtered) list of payment products that the consumer can choose from;\n\n* Handling of the actual payment, potentially involving data capture, redirection and/or the displaying of payment instructions;\n\n* Presenting a confirmation/failure page after the payment.\n\n\n Step 1 and 3 from the above list are optional. When no or partial filtering is provided, the first page the consumer will see is a payment product selection page. However, the hosted checkout will start as if a payment product had been selected if that specific payment product is the only entry in the request's restriction filters.\n\nBy providing payment product ids and groups in the hostedCheckoutSpecificInput's paymentProductFilters object, you can reduce the list of available payment products by either excluding or restricting to certain products. Note that at least one viable payment product must be left after filtering and that exclusion is leading, meaning that restricting and excluding the same product will lead to exclusion.\n\nBy setting the tokensOnly boolean to true, as part of the paymentProductFilters object, the consumer may only complete the payment using one of the accounts on file provided in the tokens property of hostedCheckoutSpecificInput.\n\nBy setting the showResultPage boolean to false, as part of the hostedCheckoutSpecificInput, the system will skip the confirmation/failure page after the consumer has completed the payment. This setting is true by default and the results page will be presented to the user.\n\nIn case the payment product selection page needs to be skipped the hostedCheckout call needs to contain one of the following objects in which all payment products have been categorized. These will also be used if the consumer selects a related payment product.\n\n* Card payments - cardPaymentMethodSpecificInput\n\n* All credit and debit card products fall into this category if they allow for direct submission of card data without a redirect to a third party to capture the card details.\n\n* Redirect payments - redirectPaymentMethodSpecificInput\n\n* Mobile payments - mobilePaymentMethodSpecificInput\n\n* All payment products that involve a redirect to a 3rd party to complete the payment directly online, like PayPal.\n\nA generic transaction can be submitted using the order and the fraudFields objects."
							},
							"response": []
						},
						{
							"name": "Create hosted checkout - Basic - Alternative Payment Methods",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 100\n    },\n    \"customer\": {\n      \"merchantCustomerId\": \"mc_637521911919765074\",\n      \"locale\": \"en_GB\",\n      \"personalInformation\": {\n        \"name\": {\n          \"title\": \"M.\",\n          \"firstName\": \"Wile\",\n          \"surnamePrefix\": \"E.\",\n          \"surname\": \"Coyote\"\n        },\n        \"gender\": \"male\",\n        \"dateOfBirth\": \"19490917\"\n      },\n      \"companyInformation\": {\n        \"name\": \"BEL Labs\"\n      },\n      \"billingAddress\": {\n        \"additionalInfo\": \"floor 9\",\n        \"city\": \"Brussels\",\n        \"countryCode\": \"BE\",\n        \"houseNumber\": \"3\",\n        \"state\": \"Flemish Brabant\",\n        \"street\": \"Da Vincilaan\",\n        \"zip\": \"1930\"\n      },\n      \"contactDetails\": {\n        \"emailAddress\": \"wile.e.coyote@acmelabs.com\",\n        \"phoneNumber\": \"+321234567890\",\n        \"faxNumber\": \"+1234567891\",\n        \"emailMessageType\": \"html\"\n      },\n      \"fiscalNumber\": \"BE0133117948\"\n    },\n    \"references\": {\n      \"merchantReference\": \"mr_637521911919765074\",\n      \"merchantParameters\": \"SessionID=126548354&ShopperID=73541312\",\n      \"descriptor\": \"Fast and Furry-ous\"\n    },\n    \"shoppingCart\": {\n      \"items\": [\n        {\n          \"amountOfMoney\": {\n            \"currencyCode\": \"EUR\",\n            \"amount\": 100\n          },\n          \"invoiceData\": {\n            \"description\": \"BEL curve\"\n          },\n          \"orderLineDetails\": {\n            \"productName\": \"ACME12\",\n            \"discountAmount\": 0,\n            \"lineAmountTotal\": 100,\n            \"productCode\": \"ASO45\",\n            \"productPrice\": 100,\n            \"productType\": \"FoodAndDrink\",\n            \"quantity\": 1,\n            \"taxAmount\": 0,\n            \"unit\": \"piece\"\n          }\n        }\n      ]\n    }\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"locale\": \"en_GB\"\n  },\n  \"redirectPaymentMethodSpecificInput\": {\n    \"requiresApproval\": false\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts"
									]
								},
								"description": "You can start a hostedCheckout flow by posting the relevant details to the endpoint. We will then return you all the details you need to redirect the consumer to us, retrieve the status and recognize the consumer when he/she returns to your website. \n The hosted checkout allows the use of three distinct components:\n\n* Presenting a (filtered) list of payment products that the consumer can choose from;\n\n* Handling of the actual payment, potentially involving data capture, redirection and/or the displaying of payment instructions;\n\n* Presenting a confirmation/failure page after the payment.\n\n\n Step 1 and 3 from the above list are optional. When no or partial filtering is provided, the first page the consumer will see is a payment product selection page. However, the hosted checkout will start as if a payment product had been selected if that specific payment product is the only entry in the request's restriction filters.\n\nBy providing payment product ids and groups in the hostedCheckoutSpecificInput's paymentProductFilters object, you can reduce the list of available payment products by either excluding or restricting to certain products. Note that at least one viable payment product must be left after filtering and that exclusion is leading, meaning that restricting and excluding the same product will lead to exclusion.\n\nBy setting the tokensOnly boolean to true, as part of the paymentProductFilters object, the consumer may only complete the payment using one of the accounts on file provided in the tokens property of hostedCheckoutSpecificInput.\n\nBy setting the showResultPage boolean to false, as part of the hostedCheckoutSpecificInput, the system will skip the confirmation/failure page after the consumer has completed the payment. This setting is true by default and the results page will be presented to the user.\n\nIn case the payment product selection page needs to be skipped the hostedCheckout call needs to contain one of the following objects in which all payment products have been categorized. These will also be used if the consumer selects a related payment product.\n\n* Card payments - cardPaymentMethodSpecificInput\n\n* All credit and debit card products fall into this category if they allow for direct submission of card data without a redirect to a third party to capture the card details.\n\n* Redirect payments - redirectPaymentMethodSpecificInput\n\n* Mobile payments - mobilePaymentMethodSpecificInput\n\n* All payment products that involve a redirect to a 3rd party to complete the payment directly online, like PayPal.\n\nA generic transaction can be submitted using the order and the fraudFields objects."
							},
							"response": []
						},
						{
							"name": "Create hosted checkout - Advanced - Payment with token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"authorizationMode\": \"SALE\",\n    \"threeDSecure\": {\n      \"challengeCanvasSize\": \"full-screen\",\n      \"challengeIndicator\": \"challenge-required\",\n      \"skipAuthentication\": false,\n      \"exemptionRequest\": \"none\"\n    },\n    \"tokenize\": true,\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"unscheduledCardOnFileRequestor\": \"cardholderInitiated\",\n    \"unscheduledCardOnFileSequenceIndicator\": \"first\"\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"locale\": \"en_GB\",\n    \"returnUrl\": \"\",\n    \"tokens\": \"049f678a-dc77-4e02-9eec-4993b86fba6a\",\n    \"cardPaymentMethodSpecificInput\": {\n      \"groupCards\": false\n    }\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 7500\n    },\n    \"customer\": {\n      \"companyInformation\": {\n        \"name\": \"BEL Labs\"\n      }\n    },\n    \"references\": {\n      \"merchantReference\": \"ORDER-123\"\n    },\n    \"shoppingCart\": {\n      \"items\": [\n        {\n          \"amountOfMoney\": {\n            \"amount\": 2500,\n            \"currencyCode\": \"EUR\"\n          },\n          \"invoiceData\": {\n            \"description\": \"BEL curve\"\n          },\n          \"orderLineDetails\": {\n            \"productCode\": \"REF01\",\n            \"productName\": \"BEL curve\",\n            \"productPrice\": 2500,\n            \"quantity\": 1,\n            \"taxAmount\": 0\n          }\n        },\n        {\n          \"amountOfMoney\": {\n            \"amount\": 5000,\n            \"currencyCode\": \"EUR\"\n          },\n          \"invoiceData\": {\n            \"description\": \"BEpo keyboard\"\n          },\n          \"orderLineDetails\": {\n            \"productCode\": \"REF02\",\n            \"productName\": \"BEpo keyboard\",\n            \"productPrice\": 2500,\n            \"quantity\": 2,\n            \"taxAmount\": 0\n          }\n        }\n      ]\n    }\n  },\n  \"redirectPaymentMethodSpecificInput\": {\n    \"requiresApproval\": false\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts"
									]
								},
								"description": "You can start a hostedCheckout flow by posting the relevant details to the endpoint. We will then return you all the details you need to redirect the consumer to us, retrieve the status and recognize the consumer when he/she returns to your website. \n The hosted checkout allows the use of three distinct components:\n\n* Presenting a (filtered) list of payment products that the consumer can choose from;\n\n* Handling of the actual payment, potentially involving data capture, redirection and/or the displaying of payment instructions;\n\n* Presenting a confirmation/failure page after the payment.\n\n\n Step 1 and 3 from the above list are optional. When no or partial filtering is provided, the first page the consumer will see is a payment product selection page. However, the hosted checkout will start as if a payment product had been selected if that specific payment product is the only entry in the request's restriction filters.\n\nBy providing payment product ids and groups in the hostedCheckoutSpecificInput's paymentProductFilters object, you can reduce the list of available payment products by either excluding or restricting to certain products. Note that at least one viable payment product must be left after filtering and that exclusion is leading, meaning that restricting and excluding the same product will lead to exclusion.\n\nBy setting the tokensOnly boolean to true, as part of the paymentProductFilters object, the consumer may only complete the payment using one of the accounts on file provided in the tokens property of hostedCheckoutSpecificInput.\n\nBy setting the showResultPage boolean to false, as part of the hostedCheckoutSpecificInput, the system will skip the confirmation/failure page after the consumer has completed the payment. This setting is true by default and the results page will be presented to the user.\n\nIn case the payment product selection page needs to be skipped the hostedCheckout call needs to contain one of the following objects in which all payment products have been categorized. These will also be used if the consumer selects a related payment product.\n\n* Card payments - cardPaymentMethodSpecificInput\n\n* All credit and debit card products fall into this category if they allow for direct submission of card data without a redirect to a third party to capture the card details.\n\n* Redirect payments - redirectPaymentMethodSpecificInput\n\n* Mobile payments - mobilePaymentMethodSpecificInput\n\n* All payment products that involve a redirect to a 3rd party to complete the payment directly online, like PayPal.\n\nA generic transaction can be submitted using the order and the fraudFields objects."
							},
							"response": []
						},
						{
							"name": "Create hosted checkout - Advanced - Cardholder Initiated Transaction",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"authorizationMode\": \"SALE\",\n    \"threeDSecure\": {\n      \"challengeCanvasSize\": \"full-screen\",\n      \"challengeIndicator\": \"challenge-required\",\n      \"skipAuthentication\": false,\n      \"exemptionRequest\": \"none\"\n    },\n    \"tokenize\": true,\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"unscheduledCardOnFileRequestor\": \"cardholderInitiated\",\n    \"unscheduledCardOnFileSequenceIndicator\": \"first\"\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"locale\": \"en_GB\"\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 1000\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts"
									]
								},
								"description": "You can start a hostedCheckout flow by posting the relevant details to the endpoint. We will then return you all the details you need to redirect the consumer to us, retrieve the status and recognize the consumer when he/she returns to your website. \n The hosted checkout allows the use of three distinct components:\n\n* Presenting a (filtered) list of payment products that the consumer can choose from;\n\n* Handling of the actual payment, potentially involving data capture, redirection and/or the displaying of payment instructions;\n\n* Presenting a confirmation/failure page after the payment.\n\n\n Step 1 and 3 from the above list are optional. When no or partial filtering is provided, the first page the consumer will see is a payment product selection page. However, the hosted checkout will start as if a payment product had been selected if that specific payment product is the only entry in the request's restriction filters.\n\nBy providing payment product ids and groups in the hostedCheckoutSpecificInput's paymentProductFilters object, you can reduce the list of available payment products by either excluding or restricting to certain products. Note that at least one viable payment product must be left after filtering and that exclusion is leading, meaning that restricting and excluding the same product will lead to exclusion.\n\nBy setting the tokensOnly boolean to true, as part of the paymentProductFilters object, the consumer may only complete the payment using one of the accounts on file provided in the tokens property of hostedCheckoutSpecificInput.\n\nBy setting the showResultPage boolean to false, as part of the hostedCheckoutSpecificInput, the system will skip the confirmation/failure page after the consumer has completed the payment. This setting is true by default and the results page will be presented to the user.\n\nIn case the payment product selection page needs to be skipped the hostedCheckout call needs to contain one of the following objects in which all payment products have been categorized. These will also be used if the consumer selects a related payment product.\n\n* Card payments - cardPaymentMethodSpecificInput\n\n* All credit and debit card products fall into this category if they allow for direct submission of card data without a redirect to a third party to capture the card details.\n\n* Redirect payments - redirectPaymentMethodSpecificInput\n\n* Mobile payments - mobilePaymentMethodSpecificInput\n\n* All payment products that involve a redirect to a 3rd party to complete the payment directly online, like PayPal.\n\nA generic transaction can be submitted using the order and the fraudFields objects."
							},
							"response": []
						},
						{
							"name": "Create hosted checkout - Advanced - Group Cards",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"authorizationMode\": \"SALE\",\n    \"threeDSecure\": {\n      \"challengeCanvasSize\": \"full-screen\",\n      \"challengeIndicator\": \"challenge-required\",\n      \"skipAuthentication\": false,\n      \"exemptionRequest\": \"none\"\n    }\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"locale\": \"en_GB\",\n    \"cardPaymentMethodSpecificInput\": {\n      \"groupCards\": true\n    }\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 1000\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts"
									]
								},
								"description": "You can start a hostedCheckout flow by posting the relevant details to the endpoint. We will then return you all the details you need to redirect the consumer to us, retrieve the status and recognize the consumer when he/she returns to your website. \n The hosted checkout allows the use of three distinct components:\n\n* Presenting a (filtered) list of payment products that the consumer can choose from;\n\n* Handling of the actual payment, potentially involving data capture, redirection and/or the displaying of payment instructions;\n\n* Presenting a confirmation/failure page after the payment.\n\n\n Step 1 and 3 from the above list are optional. When no or partial filtering is provided, the first page the consumer will see is a payment product selection page. However, the hosted checkout will start as if a payment product had been selected if that specific payment product is the only entry in the request's restriction filters.\n\nBy providing payment product ids and groups in the hostedCheckoutSpecificInput's paymentProductFilters object, you can reduce the list of available payment products by either excluding or restricting to certain products. Note that at least one viable payment product must be left after filtering and that exclusion is leading, meaning that restricting and excluding the same product will lead to exclusion.\n\nBy setting the tokensOnly boolean to true, as part of the paymentProductFilters object, the consumer may only complete the payment using one of the accounts on file provided in the tokens property of hostedCheckoutSpecificInput.\n\nBy setting the showResultPage boolean to false, as part of the hostedCheckoutSpecificInput, the system will skip the confirmation/failure page after the consumer has completed the payment. This setting is true by default and the results page will be presented to the user.\n\nIn case the payment product selection page needs to be skipped the hostedCheckout call needs to contain one of the following objects in which all payment products have been categorized. These will also be used if the consumer selects a related payment product.\n\n* Card payments - cardPaymentMethodSpecificInput\n\n* All credit and debit card products fall into this category if they allow for direct submission of card data without a redirect to a third party to capture the card details.\n\n* Redirect payments - redirectPaymentMethodSpecificInput\n\n* Mobile payments - mobilePaymentMethodSpecificInput\n\n* All payment products that involve a redirect to a 3rd party to complete the payment directly online, like PayPal.\n\nA generic transaction can be submitted using the order and the fraudFields objects."
							},
							"response": []
						},
						{
							"name": "Create hosted checkout - Advanced - Cards only - Group Cards",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"isRecurring\": false,\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"authorizationMode\": \"FINAL_AUTHORIZATION\",\n    \"tokenize\": true\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 100\n    },\n    \"customer\": {\n      \"merchantCustomerId\": \"mc_637521911919765074\",\n      \"locale\": \"en_GB\",\n      \"personalInformation\": {\n        \"name\": {\n          \"title\": \"M.\",\n          \"firstName\": \"Wile\",\n          \"surname\": \"Coyote\"\n        },\n        \"gender\": \"male\",\n        \"dateOfBirth\": \"19490917\"\n      },\n      \"companyInformation\": {\n        \"name\": \"BEL Labs\"\n      },\n      \"billingAddress\": {\n        \"street\": \"Da Vincilaan\",\n        \"houseNumber\": \"3\",\n        \"additionalInfo\": \"floor 9\",\n        \"zip\": \"1930\",\n        \"city\": \"Brussels\",\n        \"state\": \"Flemish Brabant\",\n        \"countryCode\": \"BE\"\n      },\n      \"shipping\": {\n        \"address\": {\n          \"additionalInfo\": \"floor 9\",\n          \"city\": \"Brussels\",\n          \"countryCode\": \"BE\",\n          \"houseNumber\": \"3\",\n          \"state\": \"Flemish Brabant\",\n          \"street\": \"Da Vincilaan\",\n          \"zip\": \"1930\",\n          \"name\": {\n            \"title\": \"Mme.\",\n            \"firstName\": \"bip\",\n            \"surname\": \"bip\"\n          }\n        },\n        \"addressIndicator\": \"string\",\n        \"emailAddress\": \"string\",\n        \"firstUsageDate\": \"20230101\",\n        \"isFirstUsage\": true,\n        \"method\": {},\n        \"type\": \"string\",\n        \"shippingCost\": 1000,\n        \"shippingCostTax\": 100\n      },\n      \"contactDetails\": {\n        \"emailAddress\": \"wile.e.coyote@acmelabs.com\",\n        \"phoneNumber\": \"+321234567890\",\n        \"faxNumber\": \"+1234567891\",\n        \"emailMessageType\": \"html\"\n      },\n      \"fiscalNumber\": \"BE0133117948\"\n    },\n    \"references\": {\n      \"merchantReference\": \"mr_637521911919765074\",\n      \"merchantParameters\": \"SessionID=126548354&ShopperID=73541312\",\n      \"descriptor\": \"Fast and Furry-ous\"\n    },\n    \"shoppingCart\": {\n      \"items\": [\n        {\n          \"amountOfMoney\": {\n            \"currencyCode\": \"EUR\",\n            \"amount\": 100\n          },\n          \"invoiceData\": {\n            \"description\": \"BEL curve\"\n          },\n          \"orderLineDetails\": {\n            \"productName\": \"ACME12\",\n            \"discountAmount\": 0,\n            \"lineAmountTotal\": 100,\n            \"productCode\": \"ASO45\",\n            \"productPrice\": 100,\n            \"productType\": \"FoodAndDrink\",\n            \"quantity\": 1,\n            \"taxAmount\": 0,\n            \"unit\": \"piece\"\n          }\n        }\n      ]\n    }\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"locale\": \"en_GB\",\n    \"cardPaymentMethodSpecificInput\": {\n      \"groupCards\": \"true\"\n    },\n    \"paymentProductFilters\": {\n      \"exclude\": {},\n      \"restrictTo\": {\n        \"groups\": [\n          \"cards\"\n        ],\n        \"products\": []\n      }\n    }\n  },\n  \"redirectPaymentMethodSpecificInput\": {\n    \"requiresApproval\": false\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts"
									]
								},
								"description": "You can start a hostedCheckout flow by posting the relevant details to the endpoint. We will then return you all the details you need to redirect the consumer to us, retrieve the status and recognize the consumer when he/she returns to your website. \n The hosted checkout allows the use of three distinct components:\n\n* Presenting a (filtered) list of payment products that the consumer can choose from;\n\n* Handling of the actual payment, potentially involving data capture, redirection and/or the displaying of payment instructions;\n\n* Presenting a confirmation/failure page after the payment.\n\n\n Step 1 and 3 from the above list are optional. When no or partial filtering is provided, the first page the consumer will see is a payment product selection page. However, the hosted checkout will start as if a payment product had been selected if that specific payment product is the only entry in the request's restriction filters.\n\nBy providing payment product ids and groups in the hostedCheckoutSpecificInput's paymentProductFilters object, you can reduce the list of available payment products by either excluding or restricting to certain products. Note that at least one viable payment product must be left after filtering and that exclusion is leading, meaning that restricting and excluding the same product will lead to exclusion.\n\nBy setting the tokensOnly boolean to true, as part of the paymentProductFilters object, the consumer may only complete the payment using one of the accounts on file provided in the tokens property of hostedCheckoutSpecificInput.\n\nBy setting the showResultPage boolean to false, as part of the hostedCheckoutSpecificInput, the system will skip the confirmation/failure page after the consumer has completed the payment. This setting is true by default and the results page will be presented to the user.\n\nIn case the payment product selection page needs to be skipped the hostedCheckout call needs to contain one of the following objects in which all payment products have been categorized. These will also be used if the consumer selects a related payment product.\n\n* Card payments - cardPaymentMethodSpecificInput\n\n* All credit and debit card products fall into this category if they allow for direct submission of card data without a redirect to a third party to capture the card details.\n\n* Redirect payments - redirectPaymentMethodSpecificInput\n\n* Mobile payments - mobilePaymentMethodSpecificInput\n\n* All payment products that involve a redirect to a 3rd party to complete the payment directly online, like PayPal.\n\nA generic transaction can be submitted using the order and the fraudFields objects."
							},
							"response": []
						},
						{
							"name": "Create hosted checkout - Advanced - DCC",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 2980\n    },\n    \"customer\": {\n      \"merchantCustomerId\": \"mc_637521911919765074\",\n      \"locale\": \"en_GB\",\n      \"personalInformation\": {\n        \"name\": {\n          \"title\": \"M.\",\n          \"firstName\": \"Wile\",\n          \"surnamePrefix\": \"E.\",\n          \"surname\": \"Coyote\"\n        },\n        \"gender\": \"male\",\n        \"dateOfBirth\": \"19490917\"\n      },\n      \"companyInformation\": {\n        \"name\": \"BEL Labs\"\n      },\n      \"billingAddress\": {\n        \"street\": \"Da Vincilaan\",\n        \"houseNumber\": \"3\",\n        \"additionalInfo\": \"floor 9\",\n        \"zip\": \"1930\",\n        \"city\": \"Brussels\",\n        \"state\": \"Flemish Brabant\",\n        \"countryCode\": \"BE\"\n      },\n      \"shippingAddress\": {\n        \"name\": {\n          \"title\": \"Mme.\",\n          \"firstName\": \"bip\",\n          \"surname\": \"bip\"\n        },\n        \"additionalInfo\": \"floor 9\",\n        \"city\": \"Brussels\",\n        \"countryCode\": \"BE\",\n        \"houseNumber\": \"3\",\n        \"state\": \"Flemish Brabant\",\n        \"street\": \"Da Vincilaan\",\n        \"zip\": \"1930\"\n      },\n      \"contactDetails\": {\n        \"emailAddress\": \"wile.e.coyote@acmelabs.com\",\n        \"phoneNumber\": \"+321234567890\",\n        \"faxNumber\": \"+1234567891\",\n        \"emailMessageType\": \"html\"\n      },\n      \"fiscalNumber\": \"BE0133117948\"\n    },\n    \"references\": {\n      \"merchantReference\": \"mr_637521911919765074\",\n      \"merchantParameters\": \"SessionID=126548354&ShopperID=73541312\",\n      \"descriptor\": \"Fast and Furry-ous\"\n    },\n    \"typeInformation\": {\n      \"purchaseType\": \"physical\"\n    },\n    \"shoppingCart\": {\n      \"items\": [\n        {\n          \"amountOfMoney\": {\n            \"currencyCode\": \"EUR\",\n            \"amount\": 2500\n          },\n          \"invoiceData\": {\n            \"description\": \"BEL curve\"\n          },\n          \"orderLineDetails\": {\n            \"productName\": \"ACME12\",\n            \"discountAmount\": 0,\n            \"lineAmountTotal\": 2500,\n            \"productCode\": \"ASO45\",\n            \"productPrice\": 500,\n            \"productType\": \"CLOTH\",\n            \"quantity\": 5,\n            \"taxAmount\": 0,\n            \"unit\": \"piece\"\n          }\n        },\n        {\n          \"amountOfMoney\": {\n            \"currencyCode\": \"EUR\",\n            \"amount\": 480\n          },\n          \"invoiceData\": {\n            \"description\": \"BEpo keyboard\"\n          },\n          \"orderLineDetails\": {\n            \"productName\": \"ASPIRIN\",\n            \"discountAmount\": 0,\n            \"lineAmountTotal\": 480,\n            \"productCode\": \"ASP01\",\n            \"productPrice\": 480,\n            \"productType\": \"MEDIC\",\n            \"quantity\": 1,\n            \"taxAmount\": 0,\n            \"unit\": \"piece\"\n          }\n        }\n      ]\n    }\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"locale\": \"en_GB\"\n  },\n  \"cardPaymentMethodSpecificInput\": {\n    \"currencyConversionSpecificInput\": {\n      \"dccEnabled\": true\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts"
									]
								},
								"description": "You can start a hostedCheckout flow by posting the relevant details to the endpoint. We will then return you all the details you need to redirect the consumer to us, retrieve the status and recognize the consumer when he/she returns to your website. \n The hosted checkout allows the use of three distinct components:\n\n* Presenting a (filtered) list of payment products that the consumer can choose from;\n\n* Handling of the actual payment, potentially involving data capture, redirection and/or the displaying of payment instructions;\n\n* Presenting a confirmation/failure page after the payment.\n\n\n Step 1 and 3 from the above list are optional. When no or partial filtering is provided, the first page the consumer will see is a payment product selection page. However, the hosted checkout will start as if a payment product had been selected if that specific payment product is the only entry in the request's restriction filters.\n\nBy providing payment product ids and groups in the hostedCheckoutSpecificInput's paymentProductFilters object, you can reduce the list of available payment products by either excluding or restricting to certain products. Note that at least one viable payment product must be left after filtering and that exclusion is leading, meaning that restricting and excluding the same product will lead to exclusion.\n\nBy setting the tokensOnly boolean to true, as part of the paymentProductFilters object, the consumer may only complete the payment using one of the accounts on file provided in the tokens property of hostedCheckoutSpecificInput.\n\nBy setting the showResultPage boolean to false, as part of the hostedCheckoutSpecificInput, the system will skip the confirmation/failure page after the consumer has completed the payment. This setting is true by default and the results page will be presented to the user.\n\nIn case the payment product selection page needs to be skipped the hostedCheckout call needs to contain one of the following objects in which all payment products have been categorized. These will also be used if the consumer selects a related payment product.\n\n* Card payments - cardPaymentMethodSpecificInput\n\n* All credit and debit card products fall into this category if they allow for direct submission of card data without a redirect to a third party to capture the card details.\n\n* Redirect payments - redirectPaymentMethodSpecificInput\n\n* Mobile payments - mobilePaymentMethodSpecificInput\n\n* All payment products that involve a redirect to a 3rd party to complete the payment directly online, like PayPal.\n\nA generic transaction can be submitted using the order and the fraudFields objects."
							},
							"response": []
						},
						{
							"name": "Create hosted checkout - Advanced - Surcharging",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 3000\n    },\n    \"surchargeSpecificInput\": {\n      \"mode\": \"on-behalf-of\"\n    }\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"locale\": \"en_GB\",\n    \"authorisationMode\": \"SALE\",\n    \"cardPaymentMethodSpecificInput\": {\n      \"groupCards\": true\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts"
									]
								},
								"description": "You can start a hostedCheckout flow by posting the relevant details to the endpoint. We will then return you all the details you need to redirect the consumer to us, retrieve the status and recognize the consumer when he/she returns to your website. \n The hosted checkout allows the use of three distinct components:\n\n* Presenting a (filtered) list of payment products that the consumer can choose from;\n\n* Handling of the actual payment, potentially involving data capture, redirection and/or the displaying of payment instructions;\n\n* Presenting a confirmation/failure page after the payment.\n\n\n Step 1 and 3 from the above list are optional. When no or partial filtering is provided, the first page the consumer will see is a payment product selection page. However, the hosted checkout will start as if a payment product had been selected if that specific payment product is the only entry in the request's restriction filters.\n\nBy providing payment product ids and groups in the hostedCheckoutSpecificInput's paymentProductFilters object, you can reduce the list of available payment products by either excluding or restricting to certain products. Note that at least one viable payment product must be left after filtering and that exclusion is leading, meaning that restricting and excluding the same product will lead to exclusion.\n\nBy setting the tokensOnly boolean to true, as part of the paymentProductFilters object, the consumer may only complete the payment using one of the accounts on file provided in the tokens property of hostedCheckoutSpecificInput.\n\nBy setting the showResultPage boolean to false, as part of the hostedCheckoutSpecificInput, the system will skip the confirmation/failure page after the consumer has completed the payment. This setting is true by default and the results page will be presented to the user.\n\nIn case the payment product selection page needs to be skipped the hostedCheckout call needs to contain one of the following objects in which all payment products have been categorized. These will also be used if the consumer selects a related payment product.\n\n* Card payments - cardPaymentMethodSpecificInput\n\n* All credit and debit card products fall into this category if they allow for direct submission of card data without a redirect to a third party to capture the card details.\n\n* Redirect payments - redirectPaymentMethodSpecificInput\n\n* Mobile payments - mobilePaymentMethodSpecificInput\n\n* All payment products that involve a redirect to a 3rd party to complete the payment directly online, like PayPal.\n\nA generic transaction can be submitted using the order and the fraudFields objects."
							},
							"response": []
						},
						{
							"name": "Get hosted checkout status - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedcheckouts/:hostedCheckoutId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedcheckouts",
										":hostedCheckoutId"
									],
									"variable": [
										{
											"key": "hostedCheckoutId"
										}
									]
								},
								"description": "You can retrieve the current status of the hosted checkout by doing a get on the hostedCheckoutId. When a payment has been created during the hosted checkout session the details are returned in this object.\n\nSessions have a maximum life span of 3 hours. This means that you can only retrieve this information while the session has not timed-out.\n\nThe status of the hostedCheckout and the payment will change when the consumer is still busy completing the hosted checkout session."
							},
							"response": []
						}
					],
					"description": "Using hostedCheckout you can process transactions through our hosted responsive payment pages. Your consumers will be able to complete the payment process using HostedCheckout that is hosted by us. Using these pages to capture card details and process card transactions will greatly reduce not only your integration efforts, but it will also reduce your 'PCI exposure' to the lowest level (SAQ-A).\n\n The HostedCheckout pages automatically adapt based on screen width of your consumers device. Clients that do not support JavaScript to be run on the client will still be able to make payments (although they will lack all the client side validation and automatic formatting to assist them). Please note that both the responsive nature and the support for clients without JavaScript support might not apply to 3rd party payment pages that the consumer might be redirected to complete the payment.\n\n HostedCheckout is also modular in its setup, allowing you to specify exactly what you want us to do as part of your checkout flow. You decide if we should display the payment product selection and/or the confirmation page after a successful payment."
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "Create payment - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"card\": {\n      \"cardholderName\": \"Wile E. Coyote\",\n      \"cardNumber\": \"4012000033330026\",\n      \"cvv\": \"123\",\n      \"expiryDate\": \"0529\"\n    },\n    \"paymentProductId\": 1\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"amount\": 1000,\n      \"currencyCode\": \"EUR\"\n    },\n    \"customer\": {\n      \"accountType\": \"none\",\n      \"billingAddress\": {\n        \"countryCode\": \"BE\"\n      },\n      \"device\": {\n        \"acceptHeader\": \"texthtml,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\",\n        \"browserData\": {\n          \"colorDepth\": 24,\n          \"javaEnabled\": false,\n          \"screenHeight\": \"1200\",\n          \"screenWidth\": \"1920\"\n        },\n        \"ipAddress\": \"123.123.123.123\",\n        \"locale\": \"en_GB\",\n        \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1 Safari/605.1.15\",\n        \"timezoneOffsetUtcMinutes\": \"420\"\n      },\n      \"locale\": \"en_GB\",\n      \"merchantCustomerId\": \"1234\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Basic - Sepa Direct Debit",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sepaDirectDebitPaymentMethodSpecificInput\": {\n    \"paymentProduct771SpecificInput\": {\n      \"mandate\": {\n        \"returnUrl\": \"https://yourReturnUrl.com\",\n        \"customer\": {\n          \"bankAccountIban\": {\n            \"iban\": \"BE45000253450589\"\n          },\n          \"companyName\": \"BEL Labs\",\n          \"contactDetails\": {\n            \"emailAddress\": \"wile.e.coyote@acmelabs.com\"\n          },\n          \"mandateAddress\": {\n            \"city\": \"Brussels\",\n            \"countryCode\": \"BE\",\n            \"street\": \"Da Vincilaan\",\n            \"zip\": \"1930\"\n          },\n          \"personalInformation\": {\n            \"name\": {\n              \"firstName\": \"john\",\n              \"surname\": \"doe\"\n            }\n          }\n        },\n        \"customerReference\": \"0efaa98944324234b9ad27f9355a1093\",\n        \"language\": \"en\",\n        \"recurrenceType\": \"RECURRING\",\n        \"signatureType\": \"SMS\"\n      }\n    },\n    \"paymentProductId\": 771\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"amount\": 1000,\n      \"currencyCode\": \"EUR\"\n    }\n  },\n  \"references\": {\n    \"descriptor\": \"\",\n    \"merchantReference\": \"your-order-6372\",\n    \"merchantParameters\": \"SessionID=126548354&ShopperID=73541312\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Basic - Hosted tokenization ID",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"hostedTokenizationId\": \"XXXXXXXXXXXXXXXXXXX\",\n  \"cardPaymentMethodSpecificInput\": {\n    \"authorizationMode\": \"SALE\"\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"amount\": 3000,\n      \"currencyCode\": \"EUR\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Basic - iDEAL",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": {\n    \"customer\": {\n      \"billingAddress\": {\n        \"countryCode\": \"BE\"\n      }\n    },\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 1000\n    }\n  },\n  \"redirectPaymentMethodSpecificInput\": {\n    \"paymentProductId\": \"809\",\n    \"paymentProduct809SpecificInput\": {\n      \"issuerId\": \"RABONL2U\"\n    },\n    \"redirectionData\": {\n      \"returnUrl\": \"https://www.worldline.com\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Advanced - 3DSv2 External authentication",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"card\": {\n      \"cardholderName\": \"Wile E. Coyote\",\n      \"cardNumber\": \"4012000033330026\",\n      \"cvv\": \"123\",\n      \"expiryDate\": \"0529\"\n    },\n    \"isRecurring\": false,\n    \"paymentProductId\": 1,\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"threeDSecure\": {\n      \"externalCardholderAuthenticationData\": {\n        \"cavv\": \"AAABBEg0VhI0VniQEjRWAAAAAAA=\",\n        \"directoryServerTransactionId\": \"f25084f0-5b16-4c0a-ae5d-b24808a95e4b\",\n        \"eci\": \"05\",\n        \"threeDSecureVersion\": \"2.1.0\"\n      }\n    }\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 2980\n    },\n    \"customer\": {\n      \"billingAddress\": {\n        \"countryCode\": \"BE\"\n      }\n    },\n    \"references\": {\n      \"merchantOrderId\": 123456,\n      \"merchantReference\": \"oGPc8xJURfpFitBa6ORrpkBuPoGpvD\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Advanced - Billing and shipping details, and shopping cart",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"card\": {\n      \"cardholderName\": \"Wile E. Coyote\",\n      \"cardNumber\": \"4012000033330026\",\n      \"cvv\": \"123\",\n      \"expiryDate\": \"0529\"\n    },\n    \"paymentProductId\": 1\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 1000\n    },\n    \"customer\": {\n      \"billingAddress\": {\n        \"city\": \"Brussels\",\n        \"countryCode\": \"BE\",\n        \"houseNumber\": \"3\",\n        \"state\": \"Flemish Brabant\",\n        \"street\": \"Da Vincilaan\",\n        \"zip\": \"1930\"\n      },\n      \"contactDetails\": {\n        \"emailAddress\": \"wile.e.coyote@acmelabs.com\",\n        \"personalInformation\": {\n          \"dateOfBirth\": \"19700325\",\n          \"gender\": \"male\",\n          \"name\": {\n            \"firstName\": \"John\",\n            \"surName\": \"Doe\",\n            \"title\": \"Mr\"\n          }\n        }\n      }\n    },\n    \"shipping\": {\n      \"address\": {\n        \"city\": \"Brussels\",\n        \"countryCode\": \"BE\",\n        \"houseNumber\": \"3\",\n        \"state\": \"Flemish Brabant\",\n        \"street\": \"Da Vincilaan\",\n        \"zip\": \"1930\",\n        \"name\": {\n          \"firstName\": \"John\",\n          \"surName\": \"Doe\",\n          \"title\": \"Mr\"\n        }\n      },\n      \"emailAddress\": \"wile.e.coyote@acmelabs.com\"\n    },\n    \"shoppingCart\": {\n      \"items\": [\n        {\n          \"amountOfMoney\": {\n            \"currencyCode\": \"EUR\",\n            \"amount\": 950\n          },\n          \"invoiceData\": {\n            \"description\": \"BEL curve\"\n          },\n          \"orderLineDetails\": {\n            \"productName\": \"ACME12\",\n            \"discountAmount\": 0,\n            \"lineAmountTotal\": 950,\n            \"productCode\": \"ASO45\",\n            \"productPrice\": 475,\n            \"productType\": \"CLOTH\",\n            \"quantity\": 2,\n            \"taxAmount\": 0,\n            \"unit\": \"piece\"\n          }\n        },\n        {\n          \"amountOfMoney\": {\n            \"currencyCode\": \"EUR\",\n            \"amount\": 50\n          },\n          \"invoiceData\": {\n            \"description\": \"BEL curve\"\n          },\n          \"orderLineDetails\": {\n            \"productName\": \"ACME122\",\n            \"discountAmount\": 0,\n            \"lineAmountTotal\": 50,\n            \"productCode\": \"ASO45\",\n            \"productPrice\": 50,\n            \"productType\": \"CLOTH\",\n            \"quantity\": 1,\n            \"taxAmount\": 0,\n            \"unit\": \"piece\"\n          }\n        }\n      ]\n    },\n    \"references\": {\n      \"merchantReference\": \"0123456\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Advanced - Fraud fields",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"card\": {\n      \"cardholderName\": \"Wile E. Coyote\",\n      \"cardNumber\": \"4012000033330026\",\n      \"cvv\": \"123\",\n      \"expiryDate\": \"0529\"\n    },\n    \"isRecurring\": false,\n    \"paymentProductId\": 1,\n    \"transactionChannel\": \"ECOMMERCE\"\n  },\n  \"fraudFields\": {\n    \"blackListData\": \"Additional blacklist input\",\n    \"productCategories\": [\n      \"List of product categories that are being purchased\"\n    ]\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": \"100\"\n    },\n    \"customer\": {\n      \"billingAddress\": {\n        \"countryCode\": \"BE\"\n      }\n    },\n    \"references\": {\n      \"merchantOrderId\": 123456,\n      \"merchantReference\": \"oGPc8xJURfpFitBa6ORrpkBuPoGpvD\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Advanced - Cardholder Initiated Transaction",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"authorizationMode\": \"SALE\",\n    \"threeDSecure\": {\n      \"challengeCanvasSize\": \"full-screen\",\n      \"challengeIndicator\": \"challenge-required\",\n      \"skipAuthentication\": false,\n      \"exemptionRequest\": \"none\"\n    },\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"tokenize\": \"true\",\n    \"unscheduledCardOnFileRequestor\": \"cardholderInitiated\",\n    \"unscheduledCardOnFileSequenceIndicator\": \"first\",\n    \"paymentProductId\": \"1\",\n    \"card\": {\n      \"cardholderName\": \"Wile E. Coyote\",\n      \"cardNumber\": \"4874970686672022\",\n      \"expiryDate\": \"1232\",\n      \"cvv\": \"123\"\n    }\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"locale\": \"en_GB\"\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 1000\n    },\n    \"customer\": {\n      \"device\": {\n        \"acceptHeader\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\",\n        \"browserData\": {\n          \"colorDepth\": 24,\n          \"javaEnabled\": true,\n          \"screenHeight\": \"1080\",\n          \"screenWidth\": \"1920\"\n        },\n        \"ipAddress\": \"40.91.241.131\",\n        \"locale\": \"en_GB\",\n        \"timezoneOffsetUtcMinutes\": \"0\",\n        \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36\"\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Advanced - Merchant Initiated Transaction",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"authorizationMode\": \"SALE\",\n    \"token\": \"049f678a-dc77-4e02-9eec-4993b86fba6a\",\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"unscheduledCardOnFileRequestor\": \"merchantInitiated\",\n    \"unscheduledCardOnFileSequenceIndicator\": \"subsequent\"\n  },\n  \"hostedCheckoutSpecificInput\": {\n    \"locale\": \"en_GB\"\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 1000\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Advanced - Travel data",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"card\": {\n      \"cardholderName\": \"Wile E. Coyote\",\n      \"cardNumber\": \"4012000033330026\",\n      \"cvv\": \"123\",\n      \"expiryDate\": \"0529\"\n    },\n    \"paymentProductId\": 1,\n    \"threeDSecure\": {\n      \"challengeIndicator\": \"no-preference\",\n      \"challengeCanvasSize\": \"600x400\",\n      \"authenticationFlow\": \"browser\",\n      \"redirectionData\": {\n        \"returnUrl\": \"https://fr.worldline.com\"\n      }\n    }\n  },\n  \"order\": {\n    \"additionalInput\": {\n      \"airlineData\": {\n        \"agentNumericCode\": \"12345678\",\n        \"code\": \"074\",\n        \"flightDate\": \"20200417\",\n        \"flightLegs\": [\n          {\n            \"airlineClass\": \"T\",\n            \"arrivalAirport\": \"BRU\",\n            \"arrivalTime\": \"11:20\",\n            \"carrierCode\": \"DL\",\n            \"date\": \"20201231\",\n            \"departureTime\": \"10:35\",\n            \"flightNumber\": \"0161\",\n            \"number\": 1,\n            \"originAirport\": \"AMS\",\n            \"stopoverCode\": \"permitted\"\n          },\n          {\n            \"airlineClass\": \"T\",\n            \"arrivalAirport\": \"AMS\",\n            \"arrivalTime\": \"17:20\",\n            \"carrierCode\": \"DL\",\n            \"date\": \"20210101\",\n            \"departureTime\": \"16:20\",\n            \"flightNumber\": \"0162\",\n            \"number\": 2,\n            \"originAirport\": \"BRU\",\n            \"stopoverCode\": \"permitted\"\n          }\n        ],\n        \"isETicket\": true,\n        \"isRestrictedTicket\": false,\n        \"issueDate\": \"20191205\",\n        \"name\": \"Wile Coyote\",\n        \"ticketNumber\": \"0742417513912\"\n      }\n    },\n    \"amountOfMoney\": {\n      \"currencyCode\": \"EUR\",\n      \"amount\": 10000\n    },\n    \"customer\": {\n      \"accountType\": \"none\",\n      \"billingAddress\": {\n        \"countryCode\": \"BE\"\n      },\n      \"device\": {\n        \"acceptHeader\": \"texthtml,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\",\n        \"browserData\": {\n          \"colorDepth\": 24,\n          \"javaEnabled\": false,\n          \"screenHeight\": \"1200\",\n          \"screenWidth\": \"1920\"\n        },\n        \"ipAddress\": \"123.123.123.123\",\n        \"locale\": \"en_GB\",\n        \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1 Safari/605.1.15\",\n        \"timezoneOffsetUtcMinutes\": \"420\"\n      },\n      \"locale\": \"en_GB\",\n      \"merchantCustomerId\": \"1234\"\n    },\n    \"references\": {\n      \"merchantOrderId\": 123456,\n      \"merchantReference\": \"AcmeOrder0001\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Advanced - Surcharging (on-behalf-of)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"card\": {\n      \"cardNumber\": \"4450896052107792\",\n      \"cvv\": \"123\",\n      \"expiryDate\": \"1225\",\n      \"cardholderName\": \"Wile E. Coyote\"\n    },\n    \"paymentProductId\": 1,\n    \"skipAuthentication\": true,\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"authorizationMode\": \"SALE\",\n    \"returnUrl\": \"https://secure.ogone.com/ncol/test/displayparams.asp\"\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"amount\": 3000,\n      \"currencyCode\": \"EUR\"\n    },\n    \"surchargeSpecificInput\": {\n      \"mode\": \"on-behalf-of\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Advanced - Surcharging (pass-through)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"card\": {\n      \"cardNumber\": \"4450896052107792\",\n      \"cvv\": \"123\",\n      \"expiryDate\": \"1225\",\n      \"cardholderName\": \"Wile E. Coyote\"\n    },\n    \"paymentProductId\": 1,\n    \"skipAuthentication\": true,\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"authorizationMode\": \"SALE\",\n    \"returnUrl\": \"https://secure.ogone.com/ncol/test/displayparams.asp\"\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"amount\": 3000,\n      \"currencyCode\": \"EUR\"\n    },\n    \"surchargeSpecificInput\": {\n      \"mode\": \"pass-through\",\n      \"surchargeAmount\": {\n        \"amount\": 150,\n        \"currencyCode\": \"EUR\"\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Create payment - Advanced - DCC",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"currencyConversion\": {\n      \"acceptedByUser\": true,\n      \"dccSessionId\": \"44b1ea32125b4cb5a99e15641859dc8d\"\n    },\n    \"card\": {\n      \"cardNumber\": \"4450896052107792\",\n      \"cvv\": \"123\",\n      \"expiryDate\": \"1225\",\n      \"cardholderName\": \"Wile E. Coyote\"\n    },\n    \"paymentProductId\": 1,\n    \"skipAuthentication\": true,\n    \"transactionChannel\": \"ECOMMERCE\",\n    \"authorizationMode\": \"SALE\",\n    \"returnUrl\": \"test\"\n  },\n  \"order\": {\n    \"amountOfMoney\": {\n      \"amount\": 3000,\n      \"currencyCode\": \"EUR\"\n    },\n    \"customer\": {\n      \"billingAddress\": {\n        \"street\": \"Da Vincilaan\",\n        \"houseNumber\": \"3\",\n        \"additionalInfo\": \"floor 9\",\n        \"zip\": \"1930\",\n        \"city\": \"Brussels\",\n        \"state\": \"Flemish Brabant\",\n        \"countryCode\": \"BE\"\n      },\n      \"locale\": \"en_GB\",\n      \"merchantCustomerId\": \"mc_637521911919765074\",\n      \"personalInformation\": {\n        \"name\": {\n          \"title\": \"M.\",\n          \"firstName\": \"Wile\",\n          \"surnamePrefix\": \"E.\",\n          \"surname\": \"Coyote\"\n        },\n        \"gender\": \"male\",\n        \"dateOfBirth\": \"19490917\"\n      }\n    },\n    \"references\": {\n      \"merchantReference\": \"AcmeOrder0001\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments"
									]
								},
								"description": "You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:\n\n* Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well. \n* The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned. \n* The data is sent to a third party for authorization \n* The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party. \n* Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment. \n* The data is simply stored for future processing.\n\nPlease look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.\n\nThe type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business"
							},
							"response": []
						},
						{
							"name": "Get payment - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "Retrieves the details of the payment operation with the paymentId provided in the URL.  This paymentId was returned to you with the create payment request. The request does not have any additional input parameters.\nFor capture operations, you must use Get Captures or Get Payment Details. For refund operations, you must use Get Refunds or Get Payment Details."
							},
							"response": []
						},
						{
							"name": "Get payment details - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/details",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"details"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "Retrieves the full details of the payment with the paymentId provided in the URL.  This paymentId was returned to you with the create payment request. The request does not have any additional input parameters."
							},
							"response": []
						},
						{
							"name": "Cancel payment - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"cancel"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "If you decided that you do not want to process the payment it is always smart to cancel the payment. This makes it impossible to process the payment any further and will also try to reverse an authorization on a card. Reversing an authorization that you will not be utilizing will prevent you from having to pay a fee/penalty for unused authorization requests.\n\nWhilst scheme regulations require that acquirers (and their providers, like us) support authorization reversals, there are no rules towards issuers mandating them to process the reversal advice. Therefore there is no guarantee the authorization hold is released. Also be aware that the issuer needs time to process the request. The funds may not be unblocked immediately even whilst the request is sent real-time.\nFor any authorization reversal request initiated by a merchant, we will pass the request through to an acquirer for subsequent submission to the card issuer for processing.\n\nThe authorization reversal can only be performed by the card issuer, and under no circumstances will we be responsible for performing the authorization reversal.\n\nThere is no guarantee that the card issuer will process the authorization reversal, nor is there any guarantee that the authorization reversal will occur in real-time. Neither we nor any of its affiliates will be liable to a merchant for any costs, losses and/or damages arising out of a card issuer not processing or delaying to process an authorization reversal request."
							},
							"response": []
						},
						{
							"name": "Cancel payment - Advanced",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amountOfMoney\": {\n    \"amount\": 1000,\n    \"currencyCode\": \"EUR\"\n  },\n  \"isFinal\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"cancel"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "If you decided that you do not want to process the payment it is always smart to cancel the payment. This makes it impossible to process the payment any further and will also try to reverse an authorization on a card. Reversing an authorization that you will not be utilizing will prevent you from having to pay a fee/penalty for unused authorization requests.\n\nWhilst scheme regulations require that acquirers (and their providers, like us) support authorization reversals, there are no rules towards issuers mandating them to process the reversal advice. Therefore there is no guarantee the authorization hold is released. Also be aware that the issuer needs time to process the request. The funds may not be unblocked immediately even whilst the request is sent real-time.\nFor any authorization reversal request initiated by a merchant, we will pass the request through to an acquirer for subsequent submission to the card issuer for processing.\n\nThe authorization reversal can only be performed by the card issuer, and under no circumstances will we be responsible for performing the authorization reversal.\n\nThere is no guarantee that the card issuer will process the authorization reversal, nor is there any guarantee that the authorization reversal will occur in real-time. Neither we nor any of its affiliates will be liable to a merchant for any costs, losses and/or damages arising out of a card issuer not processing or delaying to process an authorization reversal request."
							},
							"response": []
						},
						{
							"name": "Capture payment - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/capture",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"capture"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "When you want to capture the funds on a payment with a PENDING_CAPTURE state you can call this API. This API allows multiple, partial captures of the authorized funds. Depending on the payment product and the 3rd party used to process the payment this might be done in real-time or in more off-line, batch-like fashion.\n\nIf the created payment requires approval then it will require this step before the funds are actually captured.\n\nPENDING_CAPTURE is only a common status with card transactions. You can specify the amount you would like to be captured in case you want to capture a lower amount than the authorized amount."
							},
							"response": []
						},
						{
							"name": "Capture payment - Advanced",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amount\": 1000,\n  \"isFinal\": false,\n  \"references\": {\n    \"merchantReference\": \"your-order-6372\",\n    \"merchantParameters\": \"SessionID=126548354&ShopperID=73541312\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/capture",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"capture"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "When you want to capture the funds on a payment with a PENDING_CAPTURE state you can call this API. This API allows multiple, partial captures of the authorized funds. Depending on the payment product and the 3rd party used to process the payment this might be done in real-time or in more off-line, batch-like fashion.\n\nIf the created payment requires approval then it will require this step before the funds are actually captured.\n\nPENDING_CAPTURE is only a common status with card transactions. You can specify the amount you would like to be captured in case you want to capture a lower amount than the authorized amount."
							},
							"response": []
						},
						{
							"name": "Refund payment - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/refund",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"refund"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "You can refund any transaction by just calling this API.  The system will automatically select the most appropriate means to refund the transaction based on the payment product that was used for the payment and the currency and the country of the refund request. \n\nDepending on the payment product of the payment you will need to supply refund specific details on where the money should be refunded to or not. You always have the option to refund just a portion of the payment amount. It is also possible to submit multiple refund requests on one payment as long as the total amount to be refunded does not exceed the total amount that was paid."
							},
							"response": []
						},
						{
							"name": "Refund payment - Advanced",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amountOfMoney\": {\n    \"amount\": 1000,\n    \"currencyCode\": \"EUR\"\n  },\n  \"references\": {\n    \"merchantReference\": \"your-order-6372\",\n    \"merchantParameters\": \"SessionID=126548354&ShopperID=73541312\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/refund",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"refund"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "You can refund any transaction by just calling this API.  The system will automatically select the most appropriate means to refund the transaction based on the payment product that was used for the payment and the currency and the country of the refund request. \n\nDepending on the payment product of the payment you will need to supply refund specific details on where the money should be refunded to or not. You always have the option to refund just a portion of the payment amount. It is also possible to submit multiple refund requests on one payment as long as the total amount to be refunded does not exceed the total amount that was paid."
							},
							"response": []
						}
					],
					"description": "The payments REST services allow you to initiate a payment, retrieve the payment details or perform specific actions like refunding or requesting capture of a payment. A payment is identified by its paymentId. Some payment products allow a two step approach allowing you to control when the authorization takes place separate from when the funds are actually captured."
				},
				{
					"name": "Captures",
					"item": [
						{
							"name": "Get captures of payment - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/captures",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"captures"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "Retrieves the details of all captures performed on the payment with the paymentId provided in the URL"
							},
							"response": []
						}
					],
					"description": "The captures REST services allow you to retrieve details of a capture created through the capture payment API. A capture is identified by its captureId."
				},
				{
					"name": "Refunds",
					"item": [
						{
							"name": "Get refunds of payment - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/refunds",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"refunds"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "Retrieves the details of all refunds performed on the payment with the paymentId provided in the URL."
							},
							"response": []
						}
					],
					"description": "The refund API allows you to manipulate refunds that have been created on a payment. Funds will be refunded to either the card or wallet that was originally charged or to a bank account if a direct refund is not possible."
				},
				{
					"name": "Complete",
					"item": [
						{
							"name": "Complete payment - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": {\n    \"amountOfMoney\": {\n      \"amount\": 1000,\n      \"currencyCode\": \"EUR\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/complete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"complete"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "Certain payment products use a two-step process to collect the required information to perform a payment. In these cases, the first step is to create a payment, the second is to complete it by calling this API. This API accepts a full payment object, but only specific properties will be required depending on the payment product.\n\nCurrently, the only payment product that makes use of Complete payment is PayPal (840).\n\nFor PayPal this API is used in the Express Checkout Shortcut flow that allows consumers to pre-select PayPal earlier in the checkout flow. This makes it possible for you to use billing and shipping details that are stored at PayPal. It separates the authentication of the user at PayPal from the transaction processing, which can then be done in the background. You call Complete payment when the redirect to PayPal was finished successful and you have all the right data (amounts) and are ready to capture the transaction.\n\nIf 2-Step 3D Secure is used for a card payment, the automatic authorization of funds will be disabled. Instead, the payment status will be PENDING_COMPLETION after the 3D Secure step. During this status you can call complete payment to authorize the payment. Once you have asked us to complete the payment, the authorization of the card will take place using the authentication data that was captured."
							},
							"response": []
						},
						{
							"name": "Complete payment - Advanced",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardPaymentMethodSpecificInput\": {\n    \"card\": {\n      \"cardholderName\": \"Wile E. Coyote\",\n      \"cardNumber\": \"4012000033330026\",\n      \"expiryDate\": \"0529\"\n    }\n  },\n  \"order\": {\n    \"additionalInput\": {\n      \"airlineData\": {\n        \"agentNumericCode\": \"\",\n        \"code\": \"\",\n        \"flightDate\": \"\",\n        \"flightLegs\": [\n          {\n            \"airlineClass\": \"\",\n            \"arrivalAirport\": \"\",\n            \"arrivalTime\": \"\",\n            \"carrierCode\": \"\",\n            \"conjunctionTicket\": \"\",\n            \"couponNumber\": \"\",\n            \"date\": \"\",\n            \"departureTime\": \"\",\n            \"endorsementOrRestriction\": \"\",\n            \"exchangeTicket\": \"\",\n            \"fare\": \"\",\n            \"legFare\": 0,\n            \"fareBasis\": \"\",\n            \"fee\": 0,\n            \"flightNumber\": \"\",\n            \"number\": 0,\n            \"originAirport\": \"\",\n            \"passengerClass\": \"\",\n            \"stopoverCode\": \"\",\n            \"taxes\": 0\n          }\n        ],\n        \"invoiceNumber\": \"\",\n        \"isETicket\": false,\n        \"isRestrictedTicket\": false,\n        \"isThirdParty\": false,\n        \"issueDate\": \"\",\n        \"merchantCustomerId\": \"\",\n        \"name\": \"\",\n        \"passengerName\": \"\",\n        \"passengers\": [\n          {\n            \"firstName\": \"\",\n            \"surname\": \"\",\n            \"surnamePrefix\": \"\",\n            \"title\": \"\"\n          }\n        ],\n        \"placeOfIssue\": \"\",\n        \"pnr\": \"\",\n        \"pointOfSale\": \"\",\n        \"posCityCode\": \"\",\n        \"ticketDeliveryMethod\": \"\",\n        \"ticketNumber\": \"\",\n        \"totalFare\": 0,\n        \"totalFee\": 0,\n        \"totalTaxes\": 0,\n        \"travelAgencyName\": \"\"\n      },\n      \"loanRecipient\": {\n        \"accountNumber\": \"\",\n        \"dateOfBirth\": \"\",\n        \"partialPan\": \"\",\n        \"surname\": \"\",\n        \"zip\": \"\"\n      },\n      \"lodgingData\": {\n        \"checkInDate\": \"\"\n      },\n      \"typeInformation\": {\n        \"purchaseType\": \"\",\n        \"transactionType\": \"\"\n      }\n    },\n    \"amountOfMoney\": {\n      \"amount\": 1000,\n      \"currencyCode\": \"EUR\"\n    },\n    \"customer\": {\n      \"companyInformation\": {\n        \"name\": \"BEL Labs\"\n      },\n      \"merchantCustomerId\": \"\",\n      \"account\": {\n        \"authentication\": {\n          \"method\": \"\",\n          \"utcTimestamp\": \"\"\n        },\n        \"changeDate\": \"\",\n        \"changedDuringCheckout\": false,\n        \"createDate\": \"\",\n        \"hadSuspiciousActivity\": false,\n        \"passwordChangeDate\": \"\",\n        \"passwordChangedDuringCheckout\": false,\n        \"paymentAccountOnFile\": {\n          \"createDate\": \"\",\n          \"numberOfCardOnFileCreationAttemptsLast24Hours\": 0\n        },\n        \"paymentActivity\": {\n          \"numberOfPaymentAttemptsLast24Hours\": 0,\n          \"numberOfPaymentAttemptsLastYear\": 0,\n          \"numberOfPurchasesLast6Months\": 0\n        }\n      },\n      \"accountType\": \"\",\n      \"billingAddress\": {\n        \"additionalInfo\": \"floor 9\",\n        \"city\": \"Brussels\",\n        \"countryCode\": \"BE\",\n        \"houseNumber\": \"3\",\n        \"state\": \"Flemish Brabant\",\n        \"street\": \"Da Vincilaan\",\n        \"zip\": \"1930\"\n      },\n      \"contactDetails\": {\n        \"emailAddress\": \"\",\n        \"faxNumber\": \"\",\n        \"mobilePhoneNumber\": \"\",\n        \"phoneNumber\": \"\",\n        \"workPhoneNumber\": \"\"\n      },\n      \"device\": {\n        \"acceptHeader\": \"\",\n        \"browserData\": {\n          \"colorDepth\": 0,\n          \"javaEnabled\": false,\n          \"javaScriptEnabled\": false,\n          \"screenHeight\": \"\",\n          \"screenWidth\": \"\"\n        },\n        \"ipAddress\": \"\",\n        \"locale\": \"en_GB\",\n        \"timezoneOffsetUtcMinutes\": \"\",\n        \"userAgent\": \"\"\n      },\n      \"fiscalNumber\": \"\",\n      \"locale\": \"en_GB\",\n      \"personalInformation\": {\n        \"dateOfBirth\": \"\",\n        \"gender\": \"\",\n        \"name\": {\n          \"firstName\": \"\",\n          \"surname\": \"\",\n          \"title\": \"\"\n        }\n      }\n    },\n    \"references\": {\n      \"descriptor\": \"\",\n      \"merchantReference\": \"your-order-6372\",\n      \"merchantParameters\": \"SessionID=126548354&ShopperID=73541312\"\n    },\n    \"shipping\": {\n      \"address\": {\n        \"additionalInfo\": \"floor 9\",\n        \"city\": \"Brussels\",\n        \"countryCode\": \"BE\",\n        \"houseNumber\": \"3\",\n        \"state\": \"Flemish Brabant\",\n        \"street\": \"Da Vincilaan\",\n        \"zip\": \"1930\",\n        \"name\": {\n          \"firstName\": \"\",\n          \"surname\": \"\",\n          \"title\": \"\"\n        }\n      },\n      \"addressIndicator\": \"\",\n      \"emailAddress\": \"\",\n      \"firstUsageDate\": \"\",\n      \"isFirstUsage\": false,\n      \"type\": \"\",\n      \"shippingCost\": 0,\n      \"shippingCostTax\": 0\n    },\n    \"shoppingCart\": {\n      \"amountBreakdown\": [\n        {\n          \"amount\": 1000,\n          \"type\": \"\"\n        }\n      ],\n      \"giftCardPurchase\": {\n        \"amountOfMoney\": {\n          \"amount\": 1000,\n          \"currencyCode\": \"EUR\"\n        },\n        \"numberOfGiftCards\": 0\n      },\n      \"isPreOrder\": false,\n      \"items\": [\n        {\n          \"amountOfMoney\": {\n            \"amount\": 1000,\n            \"currencyCode\": \"EUR\"\n          },\n          \"invoiceData\": {\n            \"description\": \"\"\n          },\n          \"orderLineDetails\": {\n            \"discountAmount\": 0,\n            \"productCode\": \"\",\n            \"productName\": \"\",\n            \"productPrice\": 0,\n            \"productType\": \"\",\n            \"quantity\": 0,\n            \"taxAmount\": 0,\n            \"unit\": \"\"\n          }\n        }\n      ],\n      \"preOrderItemAvailabilityDate\": \"\",\n      \"reOrderIndicator\": false\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payments/:paymentId/complete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payments",
										":paymentId",
										"complete"
									],
									"variable": [
										{
											"key": "paymentId"
										}
									]
								},
								"description": "Certain payment products use a two-step process to collect the required information to perform a payment. In these cases, the first step is to create a payment, the second is to complete it by calling this API. This API accepts a full payment object, but only specific properties will be required depending on the payment product.\n\nCurrently, the only payment product that makes use of Complete payment is PayPal (840).\n\nFor PayPal this API is used in the Express Checkout Shortcut flow that allows consumers to pre-select PayPal earlier in the checkout flow. This makes it possible for you to use billing and shipping details that are stored at PayPal. It separates the authentication of the user at PayPal from the transaction processing, which can then be done in the background. You call Complete payment when the redirect to PayPal was finished successful and you have all the right data (amounts) and are ready to capture the transaction.\n\nIf 2-Step 3D Secure is used for a card payment, the automatic authorization of funds will be disabled. Instead, the payment status will be PENDING_COMPLETION after the 3D Secure step. During this status you can call complete payment to authorize the payment. Once you have asked us to complete the payment, the authorization of the card will take place using the authentication data that was captured."
							},
							"response": []
						}
					]
				},
				{
					"name": "Products",
					"item": [
						{
							"name": "Get payment products - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/products?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"products"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									]
								},
								"description": "The returned payment products will be limited by the filters provided in the Create Session request.\n\nThe list can be limited on a by-call basis by providing additional details on the transaction in the request. For example, you can request that only payment products that support recurring transactions will be returned when you are setting your user up for a recurring payment. You can also reduce the data that is returned in the response by hiding certain elements. This is done using the hide field and allows the request to omit token details and/or the list of fields associated with each of the payment products.\n\nBy submitting the locale you can benefit from the server side language packs if your application does not have these or if you are using the JavaScript SDK. Note however that the values returned will be based on our default language packs and will not contain any specific modifications that you might have made through the Configuration Center. Our iOS and Android SDKs have language packs included which allows for easy management."
							},
							"response": []
						},
						{
							"name": "Get payment products - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/products?countryCode=BE&currencyCode=EUR&locale=en_GB&amount=1000&isRecurring=false&hide=fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"products"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "locale",
											"value": "en_GB"
										},
										{
											"key": "amount",
											"value": "1000"
										},
										{
											"key": "isRecurring",
											"value": "false"
										},
										{
											"key": "hide",
											"value": "fields"
										}
									]
								},
								"description": "The returned payment products will be limited by the filters provided in the Create Session request.\n\nThe list can be limited on a by-call basis by providing additional details on the transaction in the request. For example, you can request that only payment products that support recurring transactions will be returned when you are setting your user up for a recurring payment. You can also reduce the data that is returned in the response by hiding certain elements. This is done using the hide field and allows the request to omit token details and/or the list of fields associated with each of the payment products.\n\nBy submitting the locale you can benefit from the server side language packs if your application does not have these or if you are using the JavaScript SDK. Note however that the values returned will be based on our default language packs and will not contain any specific modifications that you might have made through the Configuration Center. Our iOS and Android SDKs have language packs included which allows for easy management."
							},
							"response": []
						},
						{
							"name": "Get payment product - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/products/:paymentProductId?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"products",
										":paymentProductId"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									],
									"variable": [
										{
											"key": "paymentProductId"
										}
									]
								},
								"description": "Use this API if you are just interested in one payment product or if you have filtered out the fields in the Get payment products call and you want to retrieve the field details on a single payment product. By doing it in this two-step process you will reduce the amount of data that needs to be transported back to your client, but you will have to make two calls. Usually the performance penalty is bigger when you need to do multiple calls with a small response package than one call with a bigger response package. You are however free to choose the best solution for your use case. You can submit additional details on the transaction as filters. In that case, the payment product is returned only if it matches the filters, otherwise a 400 response is returned."
							},
							"response": []
						},
						{
							"name": "Get payment product - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/products/:paymentProductId?countryCode=BE&currencyCode=EUR&locale=en_GB&amount=1000&isRecurring=false&hide=fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"products",
										":paymentProductId"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "locale",
											"value": "en_GB"
										},
										{
											"key": "amount",
											"value": "1000"
										},
										{
											"key": "isRecurring",
											"value": "false"
										},
										{
											"key": "hide",
											"value": "fields"
										}
									],
									"variable": [
										{
											"key": "paymentProductId"
										}
									]
								},
								"description": "Use this API if you are just interested in one payment product or if you have filtered out the fields in the Get payment products call and you want to retrieve the field details on a single payment product. By doing it in this two-step process you will reduce the amount of data that needs to be transported back to your client, but you will have to make two calls. Usually the performance penalty is bigger when you need to do multiple calls with a small response package than one call with a bigger response package. You are however free to choose the best solution for your use case. You can submit additional details on the transaction as filters. In that case, the payment product is returned only if it matches the filters, otherwise a 400 response is returned."
							},
							"response": []
						},
						{
							"name": "Get payment product networks - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/products/:paymentProductId/networks?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"products",
										":paymentProductId",
										"networks"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									],
									"variable": [
										{
											"key": "paymentProductId"
										}
									]
								},
								"description": "Mobile payment methods (e.g., Apple Pay, Google Pay) use networks like \"VISA\" for actual payments. The consumer's device should display cards using available networks. This endpoint lists networks for the current payment context. The returned networks depend on query parameters, payment product support, and configurations."
							},
							"response": []
						},
						{
							"name": "Get payment product networks - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/products/:paymentProductId/networks?countryCode=BE&currencyCode=EUR&amount=1000&isRecurring=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"products",
										":paymentProductId",
										"networks"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "amount",
											"value": "1000"
										},
										{
											"key": "isRecurring",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "paymentProductId"
										}
									]
								},
								"description": "Mobile payment methods (e.g., Apple Pay, Google Pay) use networks like \"VISA\" for actual payments. The consumer's device should display cards using available networks. This endpoint lists networks for the current payment context. The returned networks depend on query parameters, payment product support, and configurations."
							},
							"response": []
						},
						{
							"name": "Get payment product directory - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/products/:paymentProductId/directory?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"products",
										":paymentProductId",
										"directory"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									],
									"variable": [
										{
											"key": "paymentProductId"
										}
									]
								},
								"description": "Certain payment products have directories that the consumer needs to pick from. \nThe most well known example is the list of banks for iDeal that the consumer needs to select their bank from. \niDeal is however not the only payment product for which this applies. "
							},
							"response": []
						}
					],
					"description": "Products is your entry on all things related to payment products. You will be able to retrieve all relevant payment products, based on your configuration and provided filters, their associated fields and potential directories. You can retrieve all of the information in one call or do calls on individual payment products. The data returned is designed to give you all the required information to build up your interface towards your consumers in a dynamic fashion. By doing it like that you know that you will be ready for future changes and new payment products without much effort."
				},
				{
					"name": "ProductGroups",
					"item": [
						{
							"name": "Get product groups - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/productgroups?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"productgroups"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									]
								},
								"description": "This service retrieves payment product groups, filterable by transaction details. Responses include groups matching criteria, e.g., supporting recurring payments. Use 'hide' to exclude token details or field lists."
							},
							"response": []
						},
						{
							"name": "Get product groups - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/productgroups?countryCode=BE&currencyCode=EUR&locale=en_GB&amount=1000&isRecurring=false&hide=fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"productgroups"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "locale",
											"value": "en_GB"
										},
										{
											"key": "amount",
											"value": "1000"
										},
										{
											"key": "isRecurring",
											"value": "false"
										},
										{
											"key": "hide",
											"value": "fields"
										}
									]
								},
								"description": "This service retrieves payment product groups, filterable by transaction details. Responses include groups matching criteria, e.g., supporting recurring payments. Use 'hide' to exclude token details or field lists."
							},
							"response": []
						},
						{
							"name": "Get product group - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/productgroups/:paymentProductGroupId?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"productgroups",
										":paymentProductGroupId"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									],
									"variable": [
										{
											"key": "paymentProductGroupId"
										}
									]
								},
								"description": "Use this service if you are just interested in a particular payment product group. You can submit additional details on the transaction as filters. In that case, the group is returned only if it matches the filters, otherwise a 404 response is returned."
							},
							"response": []
						},
						{
							"name": "Get product group - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/productgroups/:paymentProductGroupId?countryCode=BE&currencyCode=EUR&locale=en_GB&amount=1000&isRecurring=false&hide=fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"productgroups",
										":paymentProductGroupId"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "locale",
											"value": "en_GB"
										},
										{
											"key": "amount",
											"value": "1000"
										},
										{
											"key": "isRecurring",
											"value": "false"
										},
										{
											"key": "hide",
											"value": "fields"
										}
									],
									"variable": [
										{
											"key": "paymentProductGroupId"
										}
									]
								},
								"description": "Use this service if you are just interested in a particular payment product group. You can submit additional details on the transaction as filters. In that case, the group is returned only if it matches the filters, otherwise a 404 response is returned."
							},
							"response": []
						}
					],
					"description": "Through this API you can retrieve payment product groups. A payment product group has a collection of payment products that can be grouped together on a payment product selection page, and a set of fields to render on the payment product details page that allow to determine which payment product of the group the consumer wants to select. We currently support one payment product group named cards that has every credit card we support (and every debit card that behaves like a credit card)."
				},
				{
					"name": "Services",
					"item": [
						{
							"name": "Test connection - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/services/testconnection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"services",
										"testconnection"
									]
								},
								"description": "Test your connection and credentials "
							},
							"response": []
						},
						{
							"name": "Get IIN details - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bin\": \"401200\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/services/getIINdetails",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"services",
										"getIINdetails"
									]
								},
								"description": "This call verifies card processability and suggests the best card type based on configuration, using the initial 6 or more digits. Some cards are dual branded, having both local and international brands, and may not be returned if not supported. Once the first 6 digits are captured, use this API to validate card type and acceptance. The resulting paymentProductId can be used to display the suitable payment product logo for user feedback."
							},
							"response": []
						},
						{
							"name": "Get IIN details - Advanced",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bin\": \"401200\",\n  \"paymentContext\": {\n    \"amountOfMoney\": {\n      \"amount\": 1000,\n      \"currencyCode\": \"EUR\"\n    },\n    \"countryCode\": \"BE\",\n    \"isRecurring\": false\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/services/getIINdetails",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"services",
										"getIINdetails"
									]
								},
								"description": "This call verifies card processability and suggests the best card type based on configuration, using the initial 6 or more digits. Some cards are dual branded, having both local and international brands, and may not be returned if not supported. Once the first 6 digits are captured, use this API to validate card type and acceptance. The resulting paymentProductId can be used to display the suitable payment product logo for user feedback."
							},
							"response": []
						},
						{
							"name": "Get currency conversion quote - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardSource\": {\n    \"card\": {\n      \"paymentProductId\": 1,\n      \"cardNumber\": \"4622630065965315\"\n    }\n  },\n  \"transaction\": {\n    \"amount\": {\n      \"amount\": 1000,\n      \"currencyCode\": \"EUR\"\n    },\n    \"localDateTime\": \"2021-10-06T14:14:29\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/services/dccrate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"services",
										"dccrate"
									]
								},
								"description": "This call returns the currency conversion rate."
							},
							"response": []
						},
						{
							"name": "Surcharge Calculation - Basic - Card",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardSource\": {\n    \"card\": {\n      \"cardNumber\": \"5425233430109903\"\n    }\n  },\n  \"amountOfMoney\": {\n    \"amount\": 1000,\n    \"currencyCode\": \"EUR\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/services/surchargecalculation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"services",
										"surchargecalculation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Surcharge Calculation - Basic - Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardSource\": {\n    \"token\": \"7eb0027a-c084-428a-bff3-0ff479f917da\"\n  },\n  \"amountOfMoney\": {\n    \"amount\": 1000,\n    \"currencyCode\": \"EUR\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/services/surchargecalculation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"services",
										"surchargecalculation"
									]
								}
							},
							"response": []
						}
					],
					"description": "Under services you find several calls that can be used to support your payment flow:\n - Test your connection to us\n - Retrieve the card type and country where the card was issued based on the IIN of the card"
				},
				{
					"name": "Tokens",
					"item": [
						{
							"name": "Get token - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/tokens/:tokenId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"tokens",
										":tokenId"
									],
									"variable": [
										{
											"key": "tokenId"
										}
									]
								},
								"description": "Use GET on a specific token to retrieve all the tokenized data for that ID. You can use some of this data towards the consumer to let them choose which stored data to re-use. You can also use data like the expiry date to check if you need to ask for updated data from your consumer.\n\nWe will never return full card details."
							},
							"response": []
						},
						{
							"name": "Delete token - Basic",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/tokens/:tokenId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"tokens",
										":tokenId"
									],
									"variable": [
										{
											"key": "tokenId"
										}
									]
								},
								"description": "Use DELETE on a specific token to remove or invalidate it. You will not be able to undo this deleting and will not be able to use the token in the future. In case you are deleting a SEPA Direct Debit you can set the date on which the mandate is to be cancelled."
							},
							"response": []
						},
						{
							"name": "Create token - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"paymentProductId\": 1,\n  \"card\": {\n    \"data\": {\n      \"card\": {\n        \"cardholderName\": \"Wile E. Coyote\",\n        \"cardNumber\": \"4111111111111111\",\n        \"expiryDate\": \"0529\",\n        \"cvv\": \"123\"\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/tokens",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"tokens"
									]
								},
								"description": "This API endpoint tokenizes payment details, with basic input validation. It does not verify details with acquirers or processors."
							},
							"response": []
						}
					],
					"description": "Using our tokenization service you can tokenize re-usable payment data like card data, bank account data including Direct Debit Mandates and PayPal BillingAgreementIDs. The main purpose for tokens is re-use of payment details. The additional benefit is that you do not need to store any sensitive payment details on your server, while still having the benefit to be able to re-use them. This allows you to process recurring card transactions without actually having access to the real card data.\n\n Tokens can be used for two types of transactions:\n\n* Recurring: Automatically charging your consumer in a regular, e.g. monthly, time frame; \n* One-off: Charge the consumer without the consumer having to re-enter all of their payment details.\n\nThe second scenario can be used to facilitate a one-click checkout solution, that would still allow the consumer to enter only their CVV value for a card transaction. CVV values can't be tokenized as they are not allowed to be stored at all.\n\nBesides the re-use of payment data, tokens have one other major use-case: Direct Debit Mandates. Especially SEPA Direct Debit transactions require that the mandate for the transactions is managed through a token with an associated mandate. Mandates are created in one go with the token, but can have a state that requires that they are approved before they can be used. As the mandate process is in most cases an offline process the approval will allow you to set the location and date where and when the mandate was signed by the consumer. Without an approved SEPA mandate you will not be able to process any payments regarding this mandate."
				},
				{
					"name": "Payouts",
					"item": [
						{
							"name": "Get payout - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payouts/:payoutId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payouts",
										":payoutId"
									],
									"variable": [
										{
											"key": "payoutId"
										}
									]
								},
								"description": "Our payout service enables seamless direct money transfers to a chosen bank account."
							},
							"response": []
						},
						{
							"name": "Create payout - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amountOfMoney\": {\n    \"amount\": 1000,\n    \"currencyCode\": \"EUR\"\n  },\n  \"cardPayoutMethodSpecificInput\": {\n    \"card\": {\n      \"cardholderName\": \"Wile E. Coyote\",\n      \"cardNumber\": \"4111111111111111\",\n      \"expiryDate\": \"0529\",\n      \"cvv\": \"123\"\n    },\n    \"paymentProductId\": 1\n  },\n  \"references\": {\n    \"merchantReference\": \"your-order-1234\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payouts"
									]
								},
								"description": "Our payout service enables seamless direct money transfers to a chosen bank account."
							},
							"response": []
						},
						{
							"name": "Create payout - Advanced",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amountOfMoney\": {\n    \"amount\": 1000,\n    \"currencyCode\": \"EUR\"\n  },\n  \"cardPayoutMethodSpecificInput\": {\n    \"card\": {\n      \"cardholderName\": \"Wile E. Coyote\",\n      \"cardNumber\": \"4012000033330026\",\n      \"cvv\": \"123\",\n      \"expiryDate\": \"0529\"\n    },\n    \"token\": \"43763dd9-6b6b-4b05-914a-5953b14dcbba\",\n    \"paymentProductId\": 840\n  },\n  \"references\": {\n    \"merchantReference\": \"your-order-6372\",\n    \"merchantParameters\": \"SessionID=126548354&ShopperID=73541312\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/payouts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"payouts"
									]
								},
								"description": "Our payout service enables seamless direct money transfers to a chosen bank account."
							},
							"response": []
						}
					]
				},
				{
					"name": "HostedTokenization",
					"item": [
						{
							"name": "Create hosted tokenization session - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedtokenizations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedtokenizations"
									]
								},
								"description": "You can start a hosted tokenization session by posting the relevant details to the endpoint. We will then return you the url with the tokenization form to be embedded in your page. "
							},
							"response": []
						},
						{
							"name": "Create hosted tokenization session - Advanced",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"locale\": \"en_GB\",\n  \"variant\": \"my-custom-template.html\",\n  \"tokens\": \"0ca037cc-9079-4df7-8f6f-f2a3443ee521,bece04aa-5131-4b96-adb9-c0b2d62bb38a,ae8b1b5c-fdb7-40ed-b483-432017a85cc9\",\n  \"askConsumerConsent\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedtokenizations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedtokenizations"
									]
								},
								"description": "You can start a hosted tokenization session by posting the relevant details to the endpoint. We will then return you the url with the tokenization form to be embedded in your page. "
							},
							"response": []
						},
						{
							"name": "Get hosted tokenization session - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/hostedtokenizations/:hostedTokenizationId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"hostedtokenizations",
										":hostedTokenizationId"
									],
									"variable": [
										{
											"key": "hostedTokenizationId"
										}
									]
								},
								"description": "You can retrieve the current status of the hosted tokenization by doing a get on the hostedTokenizationId. When a token has been created or updated during the hosted tokenization session, the details are returned in this object.\n\nSessions have a maximum life span of 3 hours. This means that you can only retrieve this information while the session has not timed-out."
							},
							"response": []
						}
					],
					"description": "Using the hosted tokenization service you can generate a form that can be embedded in your own payment page to capture and tokenize card payment data."
				},
				{
					"name": "Sessions",
					"item": [
						{
							"name": "Create session - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/sessions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"sessions"
									]
								},
								"description": "A new session is created by sending a POST request to the above mentioned end-point.\n\nSessions have a maximum lifespan of 3 hours. It is not possible to chain sessions. In case a session has expired, you can simply create a new one through this API.\n\nOne payment can span multiple sessions if needed and within one session multiple payments can be processed as long as they are with the same consumer.\n\nIt's possible to limit the payment products available to the consumer to complete the payment by providing restriction and exclusion filters for payment product ids and payment product groups.In case you have identified that the consumer is now willing to start a new session and you have previously stored tokens for this consumer it is possible to provide a list of stored tokens. If you do so, the previously stored details can easily be re-used by the consumer. Offering this will reduce the required input in the checkout process and will greatly improve the conversion to paying consumers.\n\nIt is important to secure the access to the consumer's account in your system as it provides direct access to stored payment details."
							},
							"response": []
						},
						{
							"name": "Create session - Advanced",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tokens\": [\n    \"\"\n  ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/sessions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"sessions"
									]
								},
								"description": "A new session is created by sending a POST request to the above mentioned end-point.\n\nSessions have a maximum lifespan of 3 hours. It is not possible to chain sessions. In case a session has expired, you can simply create a new one through this API.\n\nOne payment can span multiple sessions if needed and within one session multiple payments can be processed as long as they are with the same consumer.\n\nIt's possible to limit the payment products available to the consumer to complete the payment by providing restriction and exclusion filters for payment product ids and payment product groups.In case you have identified that the consumer is now willing to start a new session and you have previously stored tokens for this consumer it is possible to provide a list of stored tokens. If you do so, the previously stored details can easily be re-used by the consumer. Offering this will reduce the required input in the checkout process and will greatly improve the conversion to paying consumers.\n\nIt is important to secure the access to the consumer's account in your system as it provides direct access to stored payment details."
							},
							"response": []
						}
					],
					"description": "Sessions allow clients, like mobile phones or web-browsers, to make use of our Client API. A session always needs to be initiated through the Server API because the client will send API requests on your behalf. Sessions allow consumers to make payments and allow you to easily show the correct payment product, ask for the right properties and easily present and re-use previously stored (tokenized) payment details. It also allows for client-side encryption of sensitive data, like card number, expiry date and CVV.",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// always refresh session",
									"let twoHours = 2 * 60 * 60 * 1000;",
									"pm.collectionVariables.set('clientSessionId', pm.response.json().clientSessionId);",
									"pm.collectionVariables.set('customerId', pm.response.json().customerId);",
									"pm.collectionVariables.set('validUntil', Date.now() + twoHours)"
								]
							}
						}
					]
				},
				{
					"name": "Mandates",
					"item": [
						{
							"name": "Create mandate - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"customer\": {\n    \"bankAccountIban\": {\n      \"iban\": \"BE45000253450589\"\n    },\n    \"mandateAddress\": {\n      \"city\": \"Brussels\",\n      \"countryCode\": \"BE\",\n      \"houseNumber\": \"3\",\n      \"street\": \"Da Vincilaan\",\n      \"zip\": \"1930\"\n    },\n    \"personalInformation\": {\n      \"name\": {\n        \"firstName\": \"Jane\",\n        \"surname\": \"Doe\"\n      }\n    }\n  },\n  \"customerReference\": \"uniqueCustomerReference123456789012\",\n  \"recurrenceType\": \"UNIQUE\",\n  \"signatureType\": \"SMS\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/mandates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"mandates"
									]
								},
								"description": "Creates a mandate to be used in a SEPA Direct Debit payment."
							},
							"response": []
						},
						{
							"name": "Create mandate - Advanced",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"alias\": \"mandateAlias\",\n  \"customer\": {\n    \"bankAccountIban\": {\n      \"iban\": \"BE45000253450589\"\n    },\n    \"companyName\": \"BEL Labs\",\n    \"contactDetails\": {\n      \"emailAddress\": \"wile.e.coyote@acmelabs.com\"\n    },\n    \"mandateAddress\": {\n      \"city\": \"Brussels\",\n      \"countryCode\": \"BE\",\n      \"houseNumber\": \"3\",\n      \"street\": \"Da Vincilaan\",\n      \"zip\": \"1930\"\n    },\n    \"personalInformation\": {\n      \"name\": {\n        \"firstName\": \"Jane\",\n        \"surname\": \"Doe\"\n      },\n      \"title\": \"Mrs\"\n    }\n  },\n  \"customerReference\": \"uniqueCustomerReferenc456789012\",\n  \"language\": \"en_GB\",\n  \"recurrenceType\": \"UNIQUE\",\n  \"returnUrl\": \"https://example-mandate-signing-url.com\",\n  \"signatureType\": \"SMS\",\n  \"uniqueMandateReference\": \"exampleMandateReference\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/mandates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"mandates"
									]
								},
								"description": "Creates a mandate to be used in a SEPA Direct Debit payment."
							},
							"response": []
						},
						{
							"name": "Get mandate - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/mandates/:uniqueMandateReference",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"mandates",
										":uniqueMandateReference"
									],
									"variable": [
										{
											"key": "uniqueMandateReference"
										}
									]
								},
								"description": "Gets a created mandate to be used in a SEPA Direct Debit payment."
							},
							"response": []
						},
						{
							"name": "Block mandate - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/mandates/:uniqueMandateReference/block",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"mandates",
										":uniqueMandateReference",
										"block"
									],
									"variable": [
										{
											"key": "uniqueMandateReference"
										}
									]
								},
								"description": "Updates the mandate status to BLOCKED."
							},
							"response": []
						},
						{
							"name": "Unblock mandate - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/mandates/:uniqueMandateReference/unblock",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"mandates",
										":uniqueMandateReference",
										"unblock"
									],
									"variable": [
										{
											"key": "uniqueMandateReference"
										}
									]
								},
								"description": "Updates the mandate status from BLOCKED to ACTIVE."
							},
							"response": []
						},
						{
							"name": "Revoke mandate - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/mandates/:uniqueMandateReference/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"mandates",
										":uniqueMandateReference",
										"revoke"
									],
									"variable": [
										{
											"key": "uniqueMandateReference"
										}
									]
								},
								"description": "Updates the mandate status to REVOKED."
							},
							"response": []
						}
					],
					"description": "The mandates REST services allow you to manage mandates, used in SEPA Direct Debit payments."
				},
				{
					"name": "PrivacyPolicy",
					"item": [
						{
							"name": "Get Privacy Policy - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/services/privacypolicy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"services",
										"privacypolicy"
									]
								},
								"description": "Fetch a formated privacy policy for selected merchant and payment product IDs."
							},
							"response": []
						},
						{
							"name": "Get Privacy Policy - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/services/privacypolicy?locale=en_GB&paymentProductId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"services",
										"privacypolicy"
									],
									"query": [
										{
											"key": "locale",
											"value": "en_GB"
										},
										{
											"key": "paymentProductId",
											"value": "1"
										}
									]
								},
								"description": "Fetch a formated privacy policy for selected merchant and payment product IDs."
							},
							"response": []
						}
					],
					"description": "Through this API you can retrieve the privacy policies to display on your own page when using Server-to-Server or Hosted Tokenization Page."
				},
				{
					"name": "PaymentLinks",
					"item": [
						{
							"name": "Create payment link - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"Test payment link\",\n  \"expirationDate\": \"2023-12-11T10:30:09.055608+01:00\",\n  \"paymentLinkOrder\": {\n    \"merchantReference\": \"Order-1234\",\n    \"amount\": {\n      \"amount\": \"1000\",\n      \"currencyCode\": \"EUR\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/paymentlinks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"paymentlinks"
									]
								},
								"description": "You can create a payment link by posting the relevant details to the endpoint. We will then return you the created payment link. "
							},
							"response": []
						},
						{
							"name": "Get payment link by ID - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/paymentlinks/:paymentLinkId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"paymentlinks",
										":paymentLinkId"
									],
									"variable": [
										{
											"key": "paymentLinkId"
										}
									]
								},
								"description": "Retrieves the details of payment link with the paymentLinkId provided in the URL."
							},
							"response": []
						},
						{
							"name": "Cancel PaymentLink by ID - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/{{merchantId}}/paymentlinks/:paymentLinkId/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"{{merchantId}}",
										"paymentlinks",
										":paymentLinkId",
										"cancel"
									],
									"variable": [
										{
											"key": "paymentLinkId"
										}
									]
								},
								"description": "Cancels the payment link with paymentLinkId provided in the URL."
							},
							"response": []
						}
					],
					"description": "This API allows you to create payment links, retrieve details about your existing links, or cancel a link. A payment link is identified by its paymentLinkId."
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Environment variables",
							"var merchantId = pm.environment.get('merchantId');",
							"var apiKey = pm.environment.get('apiKey');",
							"var secretKey = pm.environment.get('secretKey');",
							"var baseUrl = pm.environment.get('baseUrl');",
							"",
							"// Variable values",
							"var paymentId = pm.environment.get('paymentId');",
							"var hostedCheckoutId = pm.environment.get('hostedCheckoutId');",
							"var refundId = pm.environment.get('refundId');",
							"var captureId = pm.environment.get('captureId');",
							"var tokenId = pm.environment.get('tokenId');",
							"var payoutId = pm.environment.get('payoutId');",
							"var mandateId = pm.environment.get('mandateId');",
							"var hostedMandateManagementId = pm.environment.get('hostedMandateManagementId');",
							"",
							"// Request variables",
							"var method = pm.request.method.toUpperCase();",
							"var date = (new Date()).toUTCString();",
							"var action = request.url.replace('{{baseUrl}}', '')",
							"       .replace('{{merchantId}}', merchantId)",
							"       .replace('{{paymentId}}', paymentId)",
							"       .replace('{{hostedCheckoutId}}', hostedCheckoutId)",
							"       .replace('{{refundId}}', refundId)",
							"       .replace('{{captureId}}', captureId)",
							"       .replace('{{tokenId}}', tokenId)",
							"       .replace('{{payoutId}}', payoutId)",
							"       .replace('{{mandateId}}', mandateId)",
							"       .replace('{{hostedMandateManagementId}}', hostedMandateManagementId);",
							"",
							"var contentType = (method == 'GET' || method == 'DELETE') ? '' : 'application/json';",
							"var keyType = 'GCS v1HMAC';",
							"var idempotenceKey = pm.request.headers.get('x-gcs-idempotence-key')",
							"var rawSignature = method + \"\\n\" + contentType + \"\\n\" + date + \"\\n\" + action + \"\\n\";",
							"var hash = CryptoJS.HmacSHA256(rawSignature, secretKey);",
							"var signature = CryptoJS.enc.Base64.stringify(hash);",
							"var authorization = keyType + ':' + apiKey + ':' + signature;",
							"",
							"pm.request.headers.add({key: 'Authorization', value: authorization });",
							"pm.request.headers.add({key: 'Date', value: date });",
							"pm.request.headers.add({key: 'Content-Type', value: 'application/json' });",
							""
						]
					}
				}
			]
		},
		{
			"name": "Client API",
			"item": [
				{
					"name": "ClientProducts",
					"item": [
						{
							"name": "Get payment products - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/products?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"products"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									]
								},
								"description": "The returned payment products will be limited by the filters provided in the Create Session request.\n\nThe list can be limited on a by-call basis by providing additional details on the transaction in the request. For example, you can request that only payment products that support recurring transactions will be returned when you are setting your user up for a recurring payment. You can also reduce the data that is returned in the response by hiding certain elements. This is done using the hide field and allows the request to omit token details and/or the list of fields associated with each of the payment products.\n\nBy submitting the locale you can benefit from the server side language packs if your application does not have these or if you are using the JavaScript SDK. Note however that the values returned will be based on our default language packs and will not contain any specific modifications that you might have made through the Configuration Center. Our iOS and Android SDKs have language packs included which allows for easy management."
							},
							"response": []
						},
						{
							"name": "Get payment products - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/products?countryCode=BE&currencyCode=EUR&locale=en_GB&amount=1000&isRecurring=false&hide=fields&operationType=Authorization",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"products"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "locale",
											"value": "en_GB"
										},
										{
											"key": "amount",
											"value": "1000"
										},
										{
											"key": "isRecurring",
											"value": "false"
										},
										{
											"key": "hide",
											"value": "fields"
										},
										{
											"key": "operationType",
											"value": "Authorization"
										}
									]
								},
								"description": "The returned payment products will be limited by the filters provided in the Create Session request.\n\nThe list can be limited on a by-call basis by providing additional details on the transaction in the request. For example, you can request that only payment products that support recurring transactions will be returned when you are setting your user up for a recurring payment. You can also reduce the data that is returned in the response by hiding certain elements. This is done using the hide field and allows the request to omit token details and/or the list of fields associated with each of the payment products.\n\nBy submitting the locale you can benefit from the server side language packs if your application does not have these or if you are using the JavaScript SDK. Note however that the values returned will be based on our default language packs and will not contain any specific modifications that you might have made through the Configuration Center. Our iOS and Android SDKs have language packs included which allows for easy management."
							},
							"response": []
						},
						{
							"name": "Get payment product - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/products/:paymentProductId?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"products",
										":paymentProductId"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									],
									"variable": [
										{
											"key": "paymentProductId"
										}
									]
								},
								"description": "Use this API if you are just interested in one payment product or if you have filtered out the fields in the Get payment products call and you want to retrieve the field details on a single payment product. By doing it in this two-step process you will reduce the amount of data that needs to be transported back to your client, but you will have to make two calls. Usually the performance penalty is bigger when you need to do multiple calls with a small response package than one call with a bigger response package. You are however free to choose the best solution for your use case. You can submit additional details on the transaction as filters. In that case, the payment product is returned only if it matches the filters, otherwise a 400 response is returned."
							},
							"response": []
						},
						{
							"name": "Get payment product - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/products/:paymentProductId?countryCode=BE&currencyCode=EUR&locale=en_GB&amount=1000&isRecurring=false&hide=fields&operationType=Authorization",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"products",
										":paymentProductId"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "locale",
											"value": "en_GB"
										},
										{
											"key": "amount",
											"value": "1000"
										},
										{
											"key": "isRecurring",
											"value": "false"
										},
										{
											"key": "hide",
											"value": "fields"
										},
										{
											"key": "operationType",
											"value": "Authorization"
										}
									],
									"variable": [
										{
											"key": "paymentProductId"
										}
									]
								},
								"description": "Use this API if you are just interested in one payment product or if you have filtered out the fields in the Get payment products call and you want to retrieve the field details on a single payment product. By doing it in this two-step process you will reduce the amount of data that needs to be transported back to your client, but you will have to make two calls. Usually the performance penalty is bigger when you need to do multiple calls with a small response package than one call with a bigger response package. You are however free to choose the best solution for your use case. You can submit additional details on the transaction as filters. In that case, the payment product is returned only if it matches the filters, otherwise a 400 response is returned."
							},
							"response": []
						},
						{
							"name": "Get payment product networks - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/products/:paymentProductId/networks?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"products",
										":paymentProductId",
										"networks"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									],
									"variable": [
										{
											"key": "paymentProductId"
										}
									]
								},
								"description": "Mobile payment methods (e.g., Apple Pay, Google Pay) use networks like \"VISA\" for actual payments. The consumer's device should display cards using available networks. This endpoint lists networks for the current payment context. The returned networks depend on query parameters, payment product support, and configurations."
							},
							"response": []
						},
						{
							"name": "Get payment product networks - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/products/:paymentProductId/networks?countryCode=BE&currencyCode=EUR&amount=1000&isRecurring=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"products",
										":paymentProductId",
										"networks"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "amount",
											"value": "1000"
										},
										{
											"key": "isRecurring",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "paymentProductId"
										}
									]
								},
								"description": "Mobile payment methods (e.g., Apple Pay, Google Pay) use networks like \"VISA\" for actual payments. The consumer's device should display cards using available networks. This endpoint lists networks for the current payment context. The returned networks depend on query parameters, payment product support, and configurations."
							},
							"response": []
						}
					],
					"description": "Through this API you can retrieve details of the payment products that are configured for your account."
				},
				{
					"name": "ClientCrypto",
					"item": [
						{
							"name": "Get public key - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/crypto/publickey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"crypto",
										"publickey"
									]
								},
								"description": "The crypto API provides a transaction-specific public key for encrypting sensitive data, such as card details."
							},
							"response": []
						}
					],
					"description": "The crypto API provides a transaction-specific public key for encrypting sensitive data, such as card details."
				},
				{
					"name": "ClientProductGroups",
					"item": [
						{
							"name": "Get product groups - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/productgroups?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"productgroups"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									]
								},
								"description": "This service retrieves payment product groups, filterable by transaction details. Responses include groups matching criteria, e.g., supporting recurring payments. Use 'hide' to exclude token details or field lists."
							},
							"response": []
						},
						{
							"name": "Get product groups - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/productgroups?countryCode=BE&currencyCode=EUR&locale=en_GB&amount=1000&isRecurring=false&hide=fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"productgroups"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "locale",
											"value": "en_GB"
										},
										{
											"key": "amount",
											"value": "1000"
										},
										{
											"key": "isRecurring",
											"value": "false"
										},
										{
											"key": "hide",
											"value": "fields"
										}
									]
								},
								"description": "This service retrieves payment product groups, filterable by transaction details. Responses include groups matching criteria, e.g., supporting recurring payments. Use 'hide' to exclude token details or field lists."
							},
							"response": []
						},
						{
							"name": "Get product group - Basic",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/productgroups/:paymentProductGroupId?countryCode=BE&currencyCode=EUR",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"productgroups",
										":paymentProductGroupId"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										}
									],
									"variable": [
										{
											"key": "paymentProductGroupId"
										}
									]
								},
								"description": "Use this service if you are just interested in a particular payment product group. You can submit additional details on the transaction as filters. In that case, the group is returned only if it matches the filters, otherwise a 404 response is returned."
							},
							"response": []
						},
						{
							"name": "Get product group - Advanced",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/productgroups/:paymentProductGroupId?countryCode=BE&currencyCode=EUR&locale=en_GB&amount=1000&isRecurring=false&hide=fields",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"productgroups",
										":paymentProductGroupId"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "BE"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "locale",
											"value": "en_GB"
										},
										{
											"key": "amount",
											"value": "1000"
										},
										{
											"key": "isRecurring",
											"value": "false"
										},
										{
											"key": "hide",
											"value": "fields"
										}
									],
									"variable": [
										{
											"key": "paymentProductGroupId"
										}
									]
								},
								"description": "Use this service if you are just interested in a particular payment product group. You can submit additional details on the transaction as filters. In that case, the group is returned only if it matches the filters, otherwise a 404 response is returned."
							},
							"response": []
						}
					],
					"description": "Through this API you can retrieve payment product groups. A payment product group has a collection of payment products that can be grouped together on a payment product selection page, and a set of fields to render on the payment product details page that allow to determine which payment product of the group the consumer wants to select. We currently support one payment product group, named cards, that has every credit card we support (and every debit card that behaves like a credit card)."
				},
				{
					"name": "ClientServices",
					"item": [
						{
							"name": "Get IIN details - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bin\": \"401200\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/services/getIINdetails",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"services",
										"getIINdetails"
									]
								},
								"description": "This call verifies card processability and suggests the best card type based on configuration, using the initial 6 or more digits. Some cards are dual branded, having both local and international brands, and may not be returned if not supported. Once the first 6 digits are captured, use this API to validate card type and acceptance. The resulting paymentProductId can be used to display the suitable payment product logo for user feedback."
							},
							"response": []
						},
						{
							"name": "Get IIN details - Advanced",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bin\": \"401200\",\n  \"paymentContext\": {\n    \"amountOfMoney\": {\n      \"amount\": 1000,\n      \"currencyCode\": \"EUR\"\n    },\n    \"countryCode\": \"BE\",\n    \"isRecurring\": false\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/services/getIINdetails",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"services",
										"getIINdetails"
									]
								},
								"description": "This call verifies card processability and suggests the best card type based on configuration, using the initial 6 or more digits. Some cards are dual branded, having both local and international brands, and may not be returned if not supported. Once the first 6 digits are captured, use this API to validate card type and acceptance. The resulting paymentProductId can be used to display the suitable payment product logo for user feedback."
							},
							"response": []
						},
						{
							"name": "Get currency conversion quote - Basic",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardSource\": {\n    \"card\": {\n      \"paymentProductId\": 1,\n      \"cardNumber\": \"4450896052107792\"\n    }\n  },\n  \"transaction\": {\n    \"amount\": {\n      \"amount\": 1000,\n      \"currencyCode\": \"EUR\"\n    },\n    \"localDateTime\": \"2021-10-06T14:14:29\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v2/{{customerId}}/services/dccrate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v2",
										"{{customerId}}",
										"services",
										"dccrate"
									]
								},
								"description": "This call returns the currency conversion rate."
							},
							"response": []
						},
						{
							"name": "Surcharge Calculation - Basic - Card",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardSource\": {\n    \"card\": {\n      \"cardNumber\": \"5425233430109903\"\n    }\n  },\n  \"amountOfMoney\": {\n    \"amount\": 1000,\n    \"currencyCode\": \"EUR\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/services/surchargecalculation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"services",
										"surchargecalculation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Surcharge Calculation - Basic - Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cardSource\": {\n    \"token\": \"7eb0027a-c084-428a-bff3-0ff479f917da\"\n  },\n  \"amountOfMoney\": {\n    \"amount\": 1000,\n    \"currencyCode\": \"EUR\"\n  }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/client/v1/{{customerId}}/services/surchargecalculation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"client",
										"v1",
										"{{customerId}}",
										"services",
										"surchargecalculation"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let clientSessionId = pm.collectionVariables.get('clientSessionId');",
							"let customerId = pm.collectionVariables.get('customerId');",
							"let validUntil = pm.collectionVariables.get('validUntil');",
							"",
							"// if no session or session expired",
							"if (clientSessionId == undefined || validUntil == undefined || parseInt(validUntil) < Date.now()) {",
							"   let twoHours = 2 * 60 * 60 * 1000;",
							"",
							"   // create new session",
							"",
							"   // env vars",
							"   let merchantId = pm.environment.get('merchantId');",
							"   let apiKey = pm.environment.get('apiKey');",
							"   let secretKey = pm.environment.get('secretKey');",
							"   let baseUrl = pm.environment.get('baseUrl');",
							"",
							"   // request variables",
							"   var method = 'POST';",
							"   var date = (new Date()).toUTCString();",
							"   let url = `${baseUrl}/v2/${merchantId}/sessions`;",
							"   let action = url.replace(`${baseUrl}`, '');",
							"",
							"   var contentType = 'application/json';",
							"   var keyType = 'GCS v1HMAC';",
							"   var idempotenceKey = pm.request.headers.get('x-gcs-idempotence-key');",
							"   var rawSignature = method + \"\\n\" + contentType + \"\\n\" + date + \"\\n\" + action + \"\\n\";",
							"   var hash = CryptoJS.HmacSHA256(rawSignature, secretKey);",
							"   var signature = CryptoJS.enc.Base64.stringify(hash);",
							"   var authorization = keyType + ':' + apiKey + ':' + signature;",
							"",
							"   pm.sendRequest({",
							"       url: url,",
							"       method: method,",
							"       header: `Content-Type:${contentType}\nAuthorization:${authorization}\nDate:${date}`,",
							"       body: {",
							"           mode: 'raw',",
							"           raw: '{}'",
							"       }",
							"   }, function(err, res) {",
							"       if (res.json() != undefined && res.json().clientSessionId != undefined){",
							"",
							"           clientSessionId = res.json().clientSessionId;",
							"           customerId = res.json().customerId;",
							"           validUntil = Date.now() + twoHours;",
							"",
							"           pm.collectionVariables.set('clientSessionId', clientSessionId);",
							"           pm.collectionVariables.set('customerId', customerId);",
							"           pm.collectionVariables.set('validUntil', validUntil);",
							"",
							"           var keyType = 'GCS v1Client';",
							"           var authorization = keyType + ':' + clientSessionId;",
							"",
							"           pm.request.headers.add({key: 'Authorization', value: authorization });",
							"           pm.request.headers.add({key: 'Date', value: date });",
							"           pm.request.headers.add({key: 'Content-Type', value: 'application/json' });",
							"       } else {",
							"           console.error('Error obtaining a valid session id: ' + res.json());",
							"       }",
							"   });",
							"} else {",
							"   // if we still have invalid value for the session id",
							"   if (clientSessionId == undefined || clientSessionId === ''){",
							"       throw new Error('Invalid clientSessionId! Please obtain a new clientSessionId.');",
							"   }",
							"",
							"   var keyType = 'GCS v1Client';",
							"   var authorization = keyType + ':' + clientSessionId;",
							"",
							"   pm.request.headers.add({key: 'Authorization', value: authorization });",
							"   pm.request.headers.add({key: 'Date', value: date });",
							"   pm.request.headers.add({key: 'Content-Type', value: 'application/json' });",
							"}"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Environment variables",
					"var merchantId = pm.environment.get('merchantId');",
					"var apiKey = pm.environment.get('apiKey');",
					"var secretKey = pm.environment.get('secretKey');",
					"var baseUrl = pm.environment.get('baseUrl');",
					"",
					"// Validate prerequisites",
					"if (merchantId == undefined || apiKey == undefined || secretKey == undefined || baseUrl == undefined){",
					"    throw new Error('Environment variables not set!');",
					"}",
					"",
					"if (merchantId === '<your-merchant-id>') {",
					"   throw new Error('Your merchantId is not properly set!');",
					"}",
					"",
					"if (apiKey === '<your-api-key>') {",
					"   throw new Error('Your apiKey is not properly set!');",
					"}",
					"",
					"if (secretKey === '<your-secret-key>') {",
					"   throw new Error('Your secretKey is not properly set!');",
					"}",
					""
				]
			}
		}
	]
}